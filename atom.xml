<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>XhinLiang</title>
  
  <subtitle>A place to talk trash</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://xhinliang.win/"/>
  <updated>2024-04-24T15:04:19.906Z</updated>
  <id>https://xhinliang.win/</id>
  
  <author>
    <name>XhinLiang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>HTTP Graceful Cancelation</title>
    <link href="https://xhinliang.win/2024/04/backend/http-graceful-cancelation/"/>
    <id>https://xhinliang.win/2024/04/backend/http-graceful-cancelation/</id>
    <published>2024-04-24T00:00:00.000Z</published>
    <updated>2024-04-24T15:04:19.906Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Outline"><a href="#Outline" class="headerlink" title="Outline"></a>Outline</h2><p>Imagine we are writing an HTTP server as described below, where the endpoint takes a long time to complete.</p><p>When a client starts a request, it may cancel it before the long-running task is completed.</p><p>The question we’re addressing here is: can the server be aware that the client has cancelled the request? If the server can be aware, it can stop the costly subsequent operation in advance to save server resources.</p><h2 id="Without-Nginx"><a href="#Without-Nginx" class="headerlink" title="Without Nginx"></a>Without Nginx</h2><h3 id="HTTP-1-1"><a href="#HTTP-1-1" class="headerlink" title="HTTP/1.1"></a>HTTP/1.1</h3><p>Let’s start with a simple example using Go’s Gin framework to serve the endpoint <code>/http1</code>.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"time"</span></span><br><span class="line">    <span class="string">"context"</span></span><br><span class="line">    <span class="string">"github.com/gin-gonic/gin"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    router := gin.Default()</span><br><span class="line"></span><br><span class="line">    router.GET(<span class="string">"/http1"</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">        <span class="comment">// Context from the Gin handler</span></span><br><span class="line">        ctx := c.Request.Context()</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Simulate a long-running task with periodic checks</span></span><br><span class="line">        <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">            <span class="comment">// Costly operation</span></span><br><span class="line">            <span class="keyword">if</span> err := costlyOperation(ctx, i); err != <span class="literal">nil</span> &#123;</span><br><span class="line">                c.AbortWithStatusJSON(<span class="number">499</span>, gin.H&#123;<span class="string">"error"</span>: <span class="string">"Client has disconnected"</span>&#125;)</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Complete the task</span></span><br><span class="line">        c.JSON(<span class="number">200</span>, gin.H&#123;<span class="string">"status"</span>: <span class="string">"Task completed successfully"</span>&#125;)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    router.Run(<span class="string">":8080"</span>) <span class="comment">// listen and serve on 0.0.0.0:8080</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">costlyOperation</span><span class="params">(ctx context.Context, i <span class="keyword">int</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">    <span class="keyword">select</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> &lt;-time.After(<span class="number">1</span> * time.Second): <span class="comment">// simulate work by sleeping</span></span><br><span class="line">        fmt.Println(<span class="string">"Working..."</span>, i)</span><br><span class="line">    <span class="keyword">case</span> &lt;-ctx.Done(): <span class="comment">// check if the context is done</span></span><br><span class="line">        fmt.Println(<span class="string">"Client has disconnected. Stopping task."</span>, i)</span><br><span class="line">        <span class="keyword">return</span> fmt.Errorf(<span class="string">"client has disconnected"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="cURL"><a href="#cURL" class="headerlink" title="cURL"></a>cURL</h4><p>We use local cURL via HTTP/1.1 to test it:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl http://localhost:8080/http1</span><br><span class="line">^C # after 2 seconds</span><br></pre></td></tr></table></figure><p>The server log is:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[GIN-debug] Listening and serving HTTP on :8080</span><br><span class="line">Working... 0</span><br><span class="line">Working... 1</span><br><span class="line">Working... 2</span><br><span class="line">Client has disconnected. Stopping task.  3</span><br><span class="line">[GIN] 2024/04/23 - 23:14:17 | 499 |  3.332915625s |       127.0.0.1 | GET      "/http1"</span><br></pre></td></tr></table></figure><p>This means the server is aware that the client has cancelled the request.</p><h4 id="XHR"><a href="#XHR" class="headerlink" title="XHR"></a>XHR</h4><p>We use XHR in a browser to test it:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">xhr.open(<span class="string">"GET"</span>, <span class="string">"http://localhost:8080/http1"</span>);</span><br><span class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (xhr.readyState === XMLHttpRequest.DONE) &#123;</span><br><span class="line">        <span class="keyword">if</span> (xhr.status === <span class="number">200</span>) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"Response:"</span>, xhr.responseText);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.error(<span class="string">"Request failed with status:"</span>, xhr.status);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">xhr.send();</span><br><span class="line">xhr.abort(); <span class="comment">// after 7 seconds</span></span><br></pre></td></tr></table></figure></p><p>The server log is:<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Working<span class="built_in">..</span>. 0</span><br><span class="line">Working<span class="built_in">..</span>. 1</span><br><span class="line">Working<span class="built_in">..</span>. 2</span><br><span class="line">Working<span class="built_in">..</span>. 3</span><br><span class="line">Working<span class="built_in">..</span>. 4</span><br><span class="line">Working<span class="built_in">..</span>. 5</span><br><span class="line">Working<span class="built_in">..</span>. 6</span><br><span class="line">Working<span class="built_in">..</span>. 7</span><br><span class="line">Client has disconnected. Stopping task.  8</span><br></pre></td></tr></table></figure></p><h4 id="How-it-works"><a href="#How-it-works" class="headerlink" title="How it works?"></a>How it works?</h4><p>The context included with each HTTP request in Go is linked to the lifecycle of the request. If the underlying TCP connection is closed, Go’s HTTP server automatically cancels this context. The cancellation can occur due to client disconnection (TCP FIN or RST), server-side timeout, or if the server manually cancels the context for other reasons (like application logic deciding to abort the request processing).</p><h3 id="HTTP-2"><a href="#HTTP-2" class="headerlink" title="HTTP/2"></a>HTTP/2</h3><p>Since Gin supports HTTP/2, let’s use it to conduct our tests.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"time"</span></span><br><span class="line">    <span class="string">"context"</span></span><br><span class="line">    <span class="string">"github.com/gin-gonic/gin"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// ... no changes in the router setup</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// To enable HTTP/2, replace the `Run` method with `RunTLS`</span></span><br><span class="line">    router.RunTLS(<span class="string">":8081"</span>, <span class="string">"/tmp/server.crt"</span>, <span class="string">"/tmp/server.key"</span>) <span class="comment">// listen and serve on 0.0.0.0:8081 using TLS, necessary for HTTP/2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ... no changes in the handler</span></span><br></pre></td></tr></table></figure><h4 id="cURL-1"><a href="#cURL-1" class="headerlink" title="cURL"></a>cURL</h4><p>We use local cURL via HTTP/2 to test it:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">curl https://localhost:8081/http2 --insecure --verbose</span><br><span class="line">*   Trying 127.0.0.1:8081...</span><br><span class="line">* Connected to</span><br><span class="line"></span><br><span class="line"> localhost (127.0.0.1) port 8081 (#0)</span><br><span class="line">* ALPN, offering h2</span><br><span class="line">* ALPN, offering http/1.1</span><br><span class="line">* successfully set certificate verify locations:</span><br><span class="line">* TLSv1.3 (OUT), TLS handshake, Client hello (1):</span><br><span class="line">* TLSv1.3 (IN), TLS handshake, Server hello (2):</span><br><span class="line">* TLSv1.3 (IN), TLS handshake, Encrypted Extensions (8):</span><br><span class="line">* TLSv1.3 (IN), TLS handshake, Certificate (11):</span><br><span class="line">* TLSv1.3 (IN), TLS handshake, CERT verify (15):</span><br><span class="line">* TLSv1.3 (IN), TLS handshake, Finished (20):</span><br><span class="line">* TLSv1.3 (OUT), TLS handshake, Finished (20):</span><br><span class="line">* SSL connection using TLSv1.3 / AEAD-CHACHA20-POLY1305-SHA256</span><br><span class="line">* ALPN, server accepted h2 as the protocol</span><br><span class="line">* Server certificate:</span><br><span class="line">*  subject: C=AU; ST=Some-State; O=Internet Widgits Pty Ltd</span><br><span class="line">*  start date: Apr 23 15:35:12 2024 GMT</span><br><span class="line">*  expire date: Apr 23 15:35:12 2025 GMT</span><br><span class="line">*  issuer: C=AU; ST=Some-State; O=Internet Widgits Pty Ltd</span><br><span class="line">*  SSL certificate verify result: self signed certificate (18), continuing anyway.</span><br><span class="line">* Using HTTP2, server supports multiplexing</span><br><span class="line">* Using Stream ID: 1 (easy handle 0x14e80bc00)</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> GET /http2 HTTP/2</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> Host: localhost:8081</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> user-agent: curl/7.86.0</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> accept: */*</span></span><br><span class="line"><span class="meta">&gt;</span></span><br><span class="line">* Connection state changed (MAX_CONCURRENT_STREAMS == 250)!</span><br></pre></td></tr></table></figure><p>The server log is:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Working... 0</span><br><span class="line">Working... 1</span><br><span class="line">Working... 2</span><br><span class="line">Working... 3</span><br><span class="line">Working... 4</span><br><span class="line">Client has disconnected. Stopping task.  5</span><br></pre></td></tr></table></figure><p>This indicates that the server is aware that the client has cancelled the request.</p><h4 id="XHR-1"><a href="#XHR-1" class="headerlink" title="XHR"></a>XHR</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">xhr.open(<span class="string">"GET"</span>, <span class="string">"https://localhost:8081/http2"</span>);</span><br><span class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (xhr.readyState === XMLHttpRequest.DONE) &#123;</span><br><span class="line">        <span class="keyword">if</span> (xhr.status === <span class="number">200</span>) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"Response:"</span>, xhr.responseText);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.error(<span class="string">"Request failed with status:"</span>, xhr.status);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">xhr.send();</span><br><span class="line">xhr.abort(); <span class="comment">// after 6 seconds</span></span><br></pre></td></tr></table></figure><p>The server log is:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Working... 0</span><br><span class="line">Working... 1</span><br><span class="line">Working... 2</span><br><span class="line">Working... 3</span><br><span class="line">Working... 4</span><br><span class="line">Working... 5</span><br><span class="line">Working... 6</span><br><span class="line">Client has disconnected. Stopping task.  7</span><br></pre></td></tr></table></figure><h3 id="Offline"><a href="#Offline" class="headerlink" title="Offline"></a>Offline</h3><p>When the user suddenly makes the device offline (without any network notification e.g., TCP FIN&amp;RST or HTTP/2 RST), what will happen?</p><p>We can use another device to test it.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 0. setup the WiFi</span></span><br><span class="line"><span class="comment"># 1. open the browser and go to http://localhost:8080/http1</span></span><br><span class="line"><span class="comment"># 2. close the WiFi</span></span><br></pre></td></tr></table></figure><p>The server log is:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Working... 0</span><br><span class="line">Working... 1</span><br><span class="line">Working... 2</span><br><span class="line">Working... 3</span><br><span class="line">Working... 4</span><br><span class="line">Working... 5</span><br><span class="line">Working... 6</span><br><span class="line">Working... 7</span><br><span class="line">Working... 8</span><br><span class="line">Working... 9</span><br><span class="line">[GIN] 2024/04/23 - 23:49:49 | 200 | 10.011190667s |   192.168.0.105 | GET      "/http1"</span><br></pre></td></tr></table></figure><p>It means the server is not aware that the client has cancelled the request.</p><h3 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h3><p>In the context of HTTP/1.1, cancellation is not explicitly handled by the protocol itself. If a client sends a request and then closes the connection before receiving the response, the server might detect that the connection has been closed when it tries to write the response. However, by that time, the server might have already processed or even completed processing the request. This type of cancellation is detected through TCP/IP connection management rather than through HTTP protocol features.</p><p>For HTTP/2 and HTTP/3, the situation is different. Both protocols support explicit request cancellation. In HTTP/2 and HTTP/3, a client can send a RST_STREAM frame to the server, which effectively tells the server to stop processing a specific stream (which corresponds to a request). This allows for more efficient cancellation and resource management on the server, as it can immediately stop processing a request upon receiving a cancellation notice.</p><p>Here’s how each protocol handles cancellation:</p><ul><li><p><strong>HTTP/1.1</strong>: Depends on whether the TCP connection is reused or not. </p><ul><li>If reused: the server may notice that the client</li></ul><p>has disconnected when it attempts to send a response and fails due to a broken TCP connection. The server might also implement timeouts or other mechanisms to detect that a client has stopped responding.</p><ul><li>If not reused: means the TCP connection has been closed by the client. The server can detect that the client has disconnected and stop processing the request.</li></ul></li><li><strong>HTTP/2 and HTTP/3</strong>: The client can send a RST_STREAM frame to explicitly cancel a request. This lets the server know immediately that the request should be aborted, which is more efficient and can help in managing server resources effectively.</li></ul><p>Servers that support HTTP/2 or HTTP/3 are thus better equipped to handle request cancellations gracefully. In any case, how well cancellation is handled can also depend on how the server’s application logic is implemented, such as whether it periodically checks for connection status or interruptions during lengthy operations.</p><h2 id="With-Nginx"><a href="#With-Nginx" class="headerlink" title="With Nginx"></a>With Nginx</h2><p>We usually use Nginx as a reverse proxy between the client and the server.</p><p>Since we commonly use HTTP/2 on the Nginx side, so after integrating with Nginx, the process flow will be like:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Client - HTTP/2 -&gt; Nginx - HTTP/1.1 -&gt; Server</span><br></pre></td></tr></table></figure><p>or<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Client - HTTP/2 -&gt; Nginx - HTTP/2 -&gt; Server</span><br></pre></td></tr></table></figure></p><p>So we prepared the nginx configuration file in the <code>nginx.conf</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">events &#123;</span><br><span class="line">    worker_connections 1024;</span><br><span class="line">&#125;</span><br><span class="line"># HTTP block</span><br><span class="line">http &#123;</span><br><span class="line">  error_log /tmp/https_error.log debug;  # Specify a custom path and log level</span><br><span class="line"></span><br><span class="line">    # HTTPS server</span><br><span class="line">    server &#123;</span><br><span class="line">        listen 443 ssl http2;</span><br><span class="line">        server_name local_nginx_http_2;</span><br><span class="line"></span><br><span class="line">        ssl_certificate /tmp/server.crt;</span><br><span class="line">        ssl_certificate_key /tmp/server.key;</span><br><span class="line"></span><br><span class="line">        location /http1 &#123;</span><br><span class="line">            proxy_pass http://127.0.0.1:8080;</span><br><span class="line">            proxy_set_header Host $host;</span><br><span class="line">            proxy_http_version 1.1;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        location /http2 &#123;</span><br><span class="line">            proxy_pass https://127.0.0.1:8081;</span><br><span class="line">            proxy_set_header Host $host;</span><br><span class="line">            proxy_ssl_verify off;  # Add this line to disable SSL verification for the proxy</span><br><span class="line">        &#125;        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>In the above part, we have a conclusion that both cURL and XHR can perform a graceful cancellation.</p><p>So in this part, to simplify, we will just use a cURL to test these cases.</p><h4 id="Nginx-HTTP-1-1-gt-Server"><a href="#Nginx-HTTP-1-1-gt-Server" class="headerlink" title="Nginx - HTTP/1.1 -&gt; Server"></a>Nginx - HTTP/1.1 -&gt; Server</h4><p>The cURL is like:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl https://localhost/http1 --insecure</span><br><span class="line">^C # after 6 seconds</span><br></pre></td></tr></table></figure><p>The server log is:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Working... 0</span><br><span class="line">Working... 1</span><br><span class="line">Working... 2</span><br><span class="line">Working... 3</span><br><span class="line">Working... 4</span><br><span class="line">Working... 5</span><br><span class="line">Client has disconnected. Stopping task.  6</span><br></pre></td></tr></table></figure><p>It means the server is aware that the client has cancelled the request.</p><h4 id="Nginx-HTTP-2-gt-Server"><a href="#Nginx-HTTP-2-gt-Server" class="headerlink" title="Nginx - HTTP/2 -&gt; Server"></a>Nginx - HTTP/2 -&gt; Server</h4><p>The cURL is like:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl https://localhost/http2 --insecure</span><br><span class="line">^C # after 6 seconds</span><br></pre></td></tr></table></figure><p>The server log is:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Working... 0</span><br><span class="line">Working... 1</span><br><span class="line">Working... 2</span><br><span class="line">Working... 3</span><br><span class="line">Working... 4</span><br><span class="line">Working... 5</span><br><span class="line">Client has disconnected. Stopping task.  6</span><br></pre></td></tr></table></figure><p>It means the server is aware that the client has cancelled the request.</p><h3 id="Summary-1"><a href="#Summary-1" class="headerlink" title="Summary"></a>Summary</h3><p>When there is an Nginx reverse proxy sitting between the client and the server, handling client requests and forwarding them to the server, the behavior upon cancellation can vary depending on the protocols used between the client and Nginx, and between Nginx and the server. Let’s consider the two scenarios:</p><h4 id="Scenario-1-Client-HTTP-2-gt-Nginx-gt-Server-HTTP-1-1"><a href="#Scenario-1-Client-HTTP-2-gt-Nginx-gt-Server-HTTP-1-1" class="headerlink" title="Scenario 1: Client (HTTP/2) -&gt; Nginx -&gt; Server (HTTP/1.1)"></a>Scenario 1: Client (HTTP/2) -&gt; Nginx -&gt; Server (HTTP/1.1)</h4><ol><li>Client Cancels Request: The client sends a request using HTTP/2 and cancels it by sending a RST_STREAM frame to Nginx.</li><li>Nginx Behavior: Upon receiving the RST_STREAM frame, Nginx recognizes that the client has cancelled the request. Given that the connection to the server is over HTTP/1.1, which doesn’t support RST_STREAM, Nginx has the option to either continue processing the request or terminate the TCP connection to the server. The action Nginx takes can depend on how it’s configured: it might be set to close the connection to free up resources more quickly or to simply drop the response if the server completes the request.</li><li><p>Server Side: If Nginx decides to close the TCP connection, the server might detect this as a connection error or failure when attempting to send a response. This abrupt closing can signal to the server that it should stop processing, albeit indirectly. Without a connection to send a response, the server may halt operations, reducing</p><p>unnecessary resource usage.</p></li></ol><h4 id="Scenario-2-Client-HTTP-2-gt-Nginx-gt-Server-HTTP-2"><a href="#Scenario-2-Client-HTTP-2-gt-Nginx-gt-Server-HTTP-2" class="headerlink" title="Scenario 2: Client (HTTP/2) -&gt; Nginx -&gt; Server (HTTP/2)"></a>Scenario 2: Client (HTTP/2) -&gt; Nginx -&gt; Server (HTTP/2)</h4><ol><li>Client Cancels Request: As before, the client sends a request using HTTP/2 and cancels it by sending a RST_STREAM frame.</li><li>Nginx Behavior: Since the connections both to the client and from Nginx to the server use HTTP/2, Nginx can forward the cancellation directly by sending another RST_STREAM frame to the server. This maintains protocol integrity and allows for seamless communication of the client’s intention to cancel.</li><li>Server Side: The server, upon receiving the RST_STREAM frame from Nginx, knows immediately that the request has been cancelled and can stop processing right away. This protocol-supported method of cancellation is efficient and clear, minimizing wasted resources.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Outline&quot;&gt;&lt;a href=&quot;#Outline&quot; class=&quot;headerlink&quot; title=&quot;Outline&quot;&gt;&lt;/a&gt;Outline&lt;/h2&gt;&lt;p&gt;Imagine we are writing an HTTP server as described
      
    
    </summary>
    
      <category term="Backend" scheme="https://xhinliang.win/categories/Backend/"/>
    
    
      <category term="XHR" scheme="https://xhinliang.win/tags/XHR/"/>
    
      <category term="HTTP" scheme="https://xhinliang.win/tags/HTTP/"/>
    
      <category term="HttpClient" scheme="https://xhinliang.win/tags/HttpClient/"/>
    
      <category term="Nginx" scheme="https://xhinliang.win/tags/Nginx/"/>
    
      <category term="HTTP/2" scheme="https://xhinliang.win/tags/HTTP-2/"/>
    
      <category term="Cancelation" scheme="https://xhinliang.win/tags/Cancelation/"/>
    
      <category term="Cancel" scheme="https://xhinliang.win/tags/Cancel/"/>
    
  </entry>
  
  <entry>
    <title>Rate Limiter In Action</title>
    <link href="https://xhinliang.win/2023/12/backend/rate-limiter-in-action/"/>
    <id>https://xhinliang.win/2023/12/backend/rate-limiter-in-action/</id>
    <published>2023-12-29T00:00:00.000Z</published>
    <updated>2024-04-24T15:04:19.906Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><p>The backend systems which have lots of request per second always need a local rate limiter to protect themself.</p><p>Which “local” means that this rate limiter worked in only this process and not shared with another.</p><p>Here are some local rate limiter used in prodction evironment.</p><ul><li>Fixed Window</li><li>Floating Window</li><li>Leaky Bucket</li><li>Token Bucket</li></ul><p>And we will discuss them one by one.</p><h2 id="Fixed-Window"><a href="#Fixed-Window" class="headerlink" title="Fixed Window"></a>Fixed Window</h2><p>Fixed Window means that we can split a time to some window, and perform the action for a limit in a window.</p><p>The disatvantage is that the throughput of this system can be not such steady.<br>Image this scenario, we have a rate limiter for 1000 per second, and perform not one request in first 999ms.<br>After this, we perform 1000 request in 1ms, all of these request will be granted.<br>And then we perform 1000 request in 1ms too, as we can see, the latest 1000 requests will be granted too, because there two part of request matches the different time window.</p><p>We can reduce this defect by splitting out the time window smaller.<br>For example, when we need a rate limiter for 1000 per second, we can split one second as 100 “tenMs” then limit 10 actions per “tenMs”.<br>As we can see, the smaller you slit the time window, the smoother it rate limiter can be.</p><p>After discussing the concept of Fixed Window rate limiting, it’s beneficial to provide a code example. Here is a simple implementation in Java:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FixedWindowRateLimiter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> capacity;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> windowSizeInMillis;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> windowStart;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> usedCapacity;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FixedWindowRateLimiter</span><span class="params">(<span class="keyword">long</span> capacity, <span class="keyword">long</span> windowSizeInMillis)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.capacity = capacity;</span><br><span class="line">        <span class="keyword">this</span>.windowSizeInMillis = windowSizeInMillis;</span><br><span class="line">        <span class="keyword">this</span>.windowStart = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">this</span>.usedCapacity = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">boolean</span> <span class="title">tryAcquire</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> currentTime = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">if</span> (currentTime - windowStart &gt; windowSizeInMillis) &#123;</span><br><span class="line">            windowStart = currentTime;</span><br><span class="line">            usedCapacity = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (usedCapacity &lt; capacity) &#123;</span><br><span class="line">            usedCapacity++;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>In this example, the FixedWindowRateLimiter class defines a rate limiter with a fixed capacity and window size. The tryAcquire method checks if the current window has expired and resets it if necessary. If the capacity within the current window hasn’t been exceeded, it allows the request.</p><h2 id="Floating-Window"><a href="#Floating-Window" class="headerlink" title="Floating Window"></a>Floating Window</h2><p>Now let’s discuss the Floating Window rate limiter.</p><p>The Floating Window rate limiter improves upon the Fixed Window by smoothing out the request allowance over time. It avoids the scenario where a burst of requests is allowed at the boundary of the time windows.</p><p>A Floating Window rate limiter can be more complex to implement as it requires tracking the timestamps of individual requests.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FloatingWindowRateLimiter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> windowSizeInMillis;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> maxRequests;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Deque&lt;Long&gt; requestTimestamps = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FloatingWindowRateLimiter</span><span class="params">(<span class="keyword">long</span> windowSizeInMillis, <span class="keyword">int</span> maxRequests)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.windowSizeInMillis = windowSizeInMillis;</span><br><span class="line">        <span class="keyword">this</span>.maxRequests = maxRequests;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">boolean</span> <span class="title">allowRequest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> currentTime = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">while</span> (!requestTimestamps.isEmpty() &amp;&amp; currentTime - requestTimestamps.peek() &gt; windowSizeInMillis) &#123;</span><br><span class="line">            requestTimestamps.poll();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (requestTimestamps.size() &lt; maxRequests) &#123;</span><br><span class="line">            requestTimestamps.add(currentTime);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Leaky-Bucket"><a href="#Leaky-Bucket" class="headerlink" title="Leaky Bucket"></a>Leaky Bucket</h2><p>The Leaky Bucket algorithm models rate limiting as a bucket that leaks requests at a constant rate. This approach helps in smoothing out bursts of traffic.</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LeakyBucketRateLimiter</span> &#123;</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> capacity;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> leakRateInMillis;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> availableTokens;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> lastLeakTimestamp;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LeakyBucketRateLimiter</span><span class="params">(<span class="keyword">long</span> capacity, <span class="keyword">long</span> leakRateInMillis)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.capacity = capacity;</span><br><span class="line">        <span class="keyword">this</span>.leakRateInMillis = leakRateInMillis;</span><br><span class="line">        <span class="keyword">this</span>.availableTokens = capacity;</span><br><span class="line">        <span class="keyword">this</span>.lastLeakTimestamp = System.currentTimeMillis();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> synchronized <span class="keyword">boolean</span> <span class="title">allowRequest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> currentTime = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">long</span> timeSinceLastLeak = currentTime - lastLeakTimestamp;</span><br><span class="line">        <span class="keyword">long</span> tokensToLeak = timeSinceLastLeak / leakRateInMillis;</span><br><span class="line">        <span class="keyword">if</span> (tokensToLeak &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            availableTokens = Math.<span class="built_in">min</span>(capacity, availableTokens + tokensToLeak);</span><br><span class="line">            lastLeakTimestamp = currentTime;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (availableTokens &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            availableTokens--;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Token-Bucket"><a href="#Token-Bucket" class="headerlink" title="Token Bucket"></a>Token Bucket</h2><p>Token Bucket means that we have a bucket which contains lots of bucket, and there is another thread will supply the token in a fixed rate at the same time.</p><p>Backend system will take a token from the bucket for per request. When the bucket is run out of token, the request will be blocked.</p><p>Token Bucket seems like Leaky Bucket but can be more effective, because we can just record the number of bucket and the latest time when we supply the bucket, instead of using a token-supplier thread.</p><p>Here is a simple implementation.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RateLimiter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">long</span> latestSupplyTimestamp = <span class="number">0L</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AtomicLong tokenCount = <span class="keyword">new</span> AtomicLong();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> performPerSecond;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RateLimiter</span><span class="params">(<span class="keyword">int</span> performPerSecond)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.performPerSecond = performPerSecond;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">canDo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> now = TimeUnit.MILLISECONDS.toSeconds(System.currentTimeMillis());</span><br><span class="line">        <span class="keyword">long</span> diff = now - latestSupplyTimestamp;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (diff == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> tokenCount.decrementAndGet() &gt; <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (diff &gt;= <span class="number">1000L</span>) &#123;</span><br><span class="line">                latestSupplyTimestamp = now;</span><br><span class="line">                tokenCount.set(performPerSecond - <span class="number">1L</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 0 &lt; diff &lt; 1000</span></span><br><span class="line">            <span class="keyword">long</span> shouldSupply = diff * performPerSecond - <span class="number">1L</span>;</span><br><span class="line">            latestSupplyTimestamp = now;</span><br><span class="line">            <span class="keyword">return</span> tokenCount.addAndGet(shouldSupply) &gt;= <span class="number">0L</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Overview&quot;&gt;&lt;a href=&quot;#Overview&quot; class=&quot;headerlink&quot; title=&quot;Overview&quot;&gt;&lt;/a&gt;Overview&lt;/h2&gt;&lt;p&gt;The backend systems which have lots of request
      
    
    </summary>
    
      <category term="Backend" scheme="https://xhinliang.win/categories/Backend/"/>
    
    
      <category term="Java" scheme="https://xhinliang.win/tags/Java/"/>
    
      <category term="Backend" scheme="https://xhinliang.win/tags/Backend/"/>
    
      <category term="Concurrent" scheme="https://xhinliang.win/tags/Concurrent/"/>
    
      <category term="Distributed" scheme="https://xhinliang.win/tags/Distributed/"/>
    
  </entry>
  
  <entry>
    <title>How to Build a Scalable Live Streaming Interactive Service - Part II</title>
    <link href="https://xhinliang.win/2022/03/backend/livestreaming/scalable-interactive-service-2/"/>
    <id>https://xhinliang.win/2022/03/backend/livestreaming/scalable-interactive-service-2/</id>
    <published>2022-03-27T00:00:00.000Z</published>
    <updated>2024-04-24T15:04:19.906Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Background"><a href="#Background" class="headerlink" title="Background"></a>Background</h2><p>Because of the networking improvement and the influent of the COVID-19, live streaming has become the hottest technology on the Internet, again.</p><p><img src="/uploads/persister-how-to-build-a-scalable-live-streaming-interactive-service--e6c9d24ely1h0obi03jucj20yv0u0dkg.jpg" alt></p><p>In the past article we have discussed signal modeling and interactive modeling, this time we will discuss the scale methods of interactive service.</p><h2 id="Limitations"><a href="#Limitations" class="headerlink" title="Limitations"></a>Limitations</h2><p>As we all know, there are simply two kinds of services in the backend, called stateless service and stateful service.</p><p>Stateless service means that the service processes requests based only on the information relayed with each request and doesn’t rely on information from earlier requests.</p><p>Stateful service means that the service processes requests based on the information relayed with each request and information stored from earlier requests.</p><p>The biggest difference between stateless service and stateful service is that stateless service can route requests to different instances easily and stateful service can’t.</p><p>The stateless services are easy to scale so that the bottleneck of the entire system commonly comes from the stateful parts.</p><p>The interactive service of live streaming is composed of a few parts as I mention below.</p><ul><li>Storages<ul><li>Relational Databases</li></ul></li><li>Caches<ul><li>Structured Collections</li><li>K-V Caches</li></ul></li><li>Calculating Services<ul><li>Scheduled Tasks</li></ul></li><li>Paying Service<ul><li>Account Transporting</li></ul></li><li>HTTP Servers</li><li>Signaling Servers</li></ul><p>And today the scaling methods of interactive service are aiming at these parts, too.</p><h2 id="Scaling-Methods"><a href="#Scaling-Methods" class="headerlink" title="Scaling Methods"></a>Scaling Methods</h2><p>The distributed systems are often constructed by several small instances, we can increase the capacity and performance by scaling the instance up. But before scaling it up we have to make our system scalable.</p><h3 id="Relational-Databases"><a href="#Relational-Databases" class="headerlink" title="Relational Databases"></a>Relational Databases</h3><p>As an internet service, we always use a relational database for data storage. We can split our data into different parts so that we can store them in different databases so that we can scale our database up.</p><p>We can treat our live streaming databases in this way, too. But the data of live streaming has some special characteristics.</p><ul><li>Timeliness. For now, the longest duration of live streaming is less than 480 hours, the average duration is less than 5 minutes. Mostly we only care about the ongoing live streaming rooms, so we can just store the recent 4 weeks’ records for online service.</li><li>Geographically. People would like to consume the live streaming related to them. So we can simply split the live streaming records by the region of the anchor.</li></ul><p>Firstly, we generate the live streaming room id according to the anchor id, which is generated by the region where they signup their accounts.</p><p>And then we insert the record into the database which the live streaming room id belongs to.</p><p>When we are querying the database by ongoing live streaming room id, we can route the request to the actual database by the id.</p><p>When we are querying the database by offline live streaming room id, we can just route it into archiving database which is append-only and can be easily extended by adding nodes.</p><p><img src="/uploads/persister-scalable-interactive-service-2--e6c9d24ely1h0oertdxcbj216h0u0tc7.jpg" alt></p><h3 id="Structured-Collections"><a href="#Structured-Collections" class="headerlink" title="Structured Collections"></a>Structured Collections</h3><p>We use Redis to implement the structured collections, so the method to scale the structured collections is to scale the Redis servers.</p><p>We never use <code>Redis Cluster</code> technology as our <code>Redis Cluster</code> solution. Conversely, we just use twemproxy to reroute the write and query. So the <code>Redis Cluster</code> we talk about below is not as same as the official <code>Redis Cluster</code> but the cluster constructed by several Twemproxy, Redis-Master, Redis-Slave, and Redis-Sentinal.</p><p>On the other hand, we often build two same Redis Cluster in different AZ(Available Zone) and assign one of them as the main cluster by config.</p><p>The write operation of the main cluster would replica to the secondary cluster by Kafka Message.</p><p><img src="/uploads/persister-scalable-interactive-service-2--e6c9d24ely1h0ofdhqbrcj215g0u078o.jpg" alt></p><p>In the image above, We can notice that the <code>Twemproxy</code> is a stateless service so it’s scalable and will not be the bottleneck of the Redis Cluster.</p><p>In fact, the key of Redis storage is often constructed by the room id, after scaling the Redis servers up, all we have to do is prevent building big-key and hot-key of Redis.</p><p>Big-key often comes from the write operation of sorted set keys and hash keys. In the scenario of live streaming, there are two effective methods to avoid big-key.</p><ul><li>Trim the collection to a fixed length when the collection is bigger than the threshold;</li><li>Limit the writing speed by rate-limiter or some other method.</li></ul><p>Hot-Key often comes from the read operation, in order to prevent it, we can use these ways below.</p><ul><li>Use another cache to store the result temporarily. For example, we can build a local cache in our service and this local cache will serve all the requests before expired;</li><li>Storage the key redundantly and choose a key randomly to read. In the general Redis Cluster solution, the different keys will locate in a different Redis-Server, so that all the requests will not be routed in a certain Redis-Server, too.</li></ul><p><img src="/uploads/persister-scalable-interactive-service-2--e6c9d24ely1h0olq9yfdqj21aw0u00wc.jpg" alt></p><p>Also, in the social platform, detecting hotspots and using a separate policy to limit writing and reading rate is a common way to be scalable.</p><h3 id="K-V-Caches"><a href="#K-V-Caches" class="headerlink" title="K-V Caches"></a>K-V Caches</h3><p>We use Memcached as our K-V Caches. Which “K-V” of K-V Caches always comes from the databases.</p><p>Different from Redis, we use no proxy in Memcached. All the read is routed by the client.</p><p>There are no master and slave in Memcached, so we built several clusters for the same usage. All the clusters are equal.</p><p><img src="/uploads/persister-scalable-interactive-service-2--e6c9d24ely1h0ogzrpxaej20xn0u077z.jpg" alt></p><p>When the client tries to read a cache from Memcached, it will have a few steps as below.</p><ol><li>Choose a cluster of its AZ randomly, and then calculate the hash number and route to a Memcached Node by this hash number;</li><li>Try to read this Memcached Node, return immediately if success;</li><li>Choose another cluster of its AZ randomly, and route to another Memcached Node by another hash number;</li><li>Try to read this Memcached Node. Firstly write back to the Memcached Node in step.2 and then return;</li><li>Call a service named <code>DbReader</code> to read the database and then write back to the Memcached Nodes of step.4 and step.2.</li></ol><p>One more thing worth mentioning is that the hash salts of different Memcached Cluster are different so that the same index Memacached Node of different Memcached Cluster will not store the values of the same keys.</p><p>In this way cache, we will have the highest availability.</p><ul><li>If one Memcached node is down, no cached will be lost because clients will read the lost keys from another Memcached Cluster and write back;</li><li>If two Memcached nodes of different Memcached Clusters are down, only 1/M * 1/N data will be lost. (M, N means the nodes count of the Memcached Clusters)</li></ul><h3 id="Scheduled-Tasks"><a href="#Scheduled-Tasks" class="headerlink" title="Scheduled Tasks"></a>Scheduled Tasks</h3><p>Processing some business periodically is a very common live streaming backend. Most of the process tasks do have these properties.</p><ul><li>They should know which rooms are ongoing;</li><li>They would do the logic separate by the live streaming room.</li></ul><p>As we know, the ongoing live streaming rooms are stored in the online databases, we can only query the ongoing live streaming room ids by scanning these tables, it would be an extravagant operation, especially for lots of businesses and processes scan concurrently.</p><p>We can use a service named “OngoingQuery” to protect the databases.</p><p><img src="/uploads/persister-scalable-interactive-service-2--e6c9d24ely1h0om5ilpczj21fl0u0dka.jpg" alt></p><p>The OngoingQuery service will store all the room ids of ongoing live streaming.</p><p>They scan the databases periodically to update the entire cache of themselves, and they the binlog of databases for instantly update. In this way, the cache of the OngoingQuery service will be the same as the data of the database eventually.</p><p>When we deploy a number of shard tasks for processing some business data, the shard tasks will register themselves to ZooKeeper at first, and then run periodically to do these things.</p><ul><li>Query the ZooKeeper to know how many process instances at this moment;</li><li>Find out the index itself of all the process instances;</li><li>Request Ongoing Query service to get the part of the partition result;</li><li>Process the business of the part.</li></ul><p>With these partition abstractions, we can separate the process task into several process instances and they can run concurrently.</p><h3 id="Account-Transporting"><a href="#Account-Transporting" class="headerlink" title="Account Transporting"></a>Account Transporting</h3><p>Almost every live streaming platform will support gift features.</p><p>The key content of the live streaming gift is account transporting. When an audience tries to pay a gift for the anchor, there will be an account transporting between the account of the audience and the account of the anchor.</p><p>As we know, platforms often store the balance of different users in different databases for scalability. So the account transporting in live streaming will always be a distributed transaction, which is very expensive.</p><p>We can use a virtual account to improve the transporting performance.</p><p><img src="/uploads/persister-scalable-interactive-service-2--e6c9d24ely1h0omsn1ul4j21570u0jw6.jpg" alt></p><p>When the live streaming room begins, we will create a virtual account for this live streaming room in each database of user balance.</p><p>The gifting operation during the live streaming will be transportation between the audience account and the virtual account of the database which the audience account belongs to.</p><p>When the live stream room end, the service named “Settler” will collect all of the virtual accounts and do the distributed transaction between virtual accounts and the anchor account.</p><h3 id="HTTP-Service"><a href="#HTTP-Service" class="headerlink" title="HTTP Service"></a>HTTP Service</h3><p>There are lots of load-balancing strategies for HTTP services, so I will not talk about this topic a lot.</p><p>The only thing I want to mention is that we can use a route policy in Nginx, for routing the same room id to the same group of service nodes, which would help us to increase the hit rate of local-cache.</p><h3 id="Signaling-Servers"><a href="#Signaling-Servers" class="headerlink" title="Signaling Servers"></a>Signaling Servers</h3><p>We have talked about this in the <a href="https://xhinliang.win/2022/01/backend/livestreaming/scalable-interactive-service-1/">How to Build a Scalable Live Streaming Interactive Service - Part I</a>.</p><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>In this article, we have discussed the scale strategies of the stateful services of live streaming interactive services. Some people also called these strategies “sharding strategy”.</p><p>All of these things have a core concept commonly – “Split the big thing into small things”, oh we have learned it in our university, isn’t it?</p><p>Next time I will share my thoughts on building a multi-region or cross-region live streaming platform, hope you will like it.</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://en.wikipedia.org/wiki/Service_statelessness_principle#:~:text=Service%20statelessness%20is%20a%20design,their%20state%20data%20whenever%20possible" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Service_statelessness_principle#:~:text=Service%20statelessness%20is%20a%20design,their%20state%20data%20whenever%20possible</a>.</li><li><a href="https://www.proud2becloud.com/stateful-vs-stateless-the-good-the-bad-and-the-ugly/" target="_blank" rel="noopener">https://www.proud2becloud.com/stateful-vs-stateless-the-good-the-bad-and-the-ugly/</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Background&quot;&gt;&lt;a href=&quot;#Background&quot; class=&quot;headerlink&quot; title=&quot;Background&quot;&gt;&lt;/a&gt;Background&lt;/h2&gt;&lt;p&gt;Because of the networking improvement 
      
    
    </summary>
    
      <category term="Backend" scheme="https://xhinliang.win/categories/Backend/"/>
    
    
      <category term="Backend" scheme="https://xhinliang.win/tags/Backend/"/>
    
      <category term="LiveStreaming" scheme="https://xhinliang.win/tags/LiveStreaming/"/>
    
      <category term="Live" scheme="https://xhinliang.win/tags/Live/"/>
    
  </entry>
  
  <entry>
    <title>How to Build a Scalable Live Streaming Interactive Service - Part I</title>
    <link href="https://xhinliang.win/2022/01/backend/livestreaming/scalable-interactive-service-1/"/>
    <id>https://xhinliang.win/2022/01/backend/livestreaming/scalable-interactive-service-1/</id>
    <published>2022-01-15T00:00:00.000Z</published>
    <updated>2024-04-24T15:04:19.906Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Background"><a href="#Background" class="headerlink" title="Background"></a>Background</h2><p>Because of the networking improvement and the influent of the COVID-19, live streaming has become the hottest technology on the Internet, again.</p><p><img src="/uploads/persister-how-to-build-a-scalable-live-streaming-interactive-service--e6c9d24ely1h0obi03jucj20yv0u0dkg.jpg" alt></p><p>Fortunately, I have been participating in building a live streaming platform. In other words, I also have some experience in this domain. Today I am gonna talk about the “Interactive Service” of live streaming, my most familiar part of the platform.</p><p>At first, I have to define the “Interactive Service”. Commonly, people always split the live streaming platform into two parts: “Video Steaming” and “Interactive Service”.</p><p><img src="/uploads/persister-how-to-build-a-scalable-live-streaming-interactive-service--e6c9d24ely1h0oblby6l5j20z60u0tbv.jpg" alt></p><p>“Video Streaming” means the audio and video that people can instantly watch and hear. “Video Streaming” is the bastion of live streaming, we can’t see anything and hear any word from the anchor without it, the live streaming totally becomes a boring group chat.</p><p>“Interactive Service” means all the other parts without “Video Streaming”. Almost everything you can join to the live streaming is the result of “Interactive Service”. For example, comments, gifts, e-commerce notifications, etc. “Interactive Service” gives live streaming a soul so that live streaming is never a monologue of the anchor, it’s a party between the anchor and all of the audiences.</p><h2 id="Interactive-Service"><a href="#Interactive-Service" class="headerlink" title="Interactive Service"></a>Interactive Service</h2><p>In my opinion, “Interactive Service” is a full-feature eco-system.</p><p>Anchors and audiences can generate signals to it, and it would deliver the signals to the other people in the live room. For example, the audience foo can comment on a signal “You look good” to the “Interactive Service”, and “Interactive Service” will broadcast this signal to the other people after a while.</p><p>On the other hand, “Interactive Service” can generate some event by itself. For example, “Interactive Service” will broadcast the exact number of users online of every live room by period, so that people can see how many people do the live room has now.</p><p>How to build an “Interactive Service” to deliver such signals in a safe, quick, and economic way, are the core parts we discuss in this article.</p><ul><li>Safe<ul><li>“Interactive Service” should check the authority of the request/connection</li><li>Client should not receive any signal not belonging to them</li></ul></li><li>Quick<ul><li>“Interactive Service” should deliver any signal in a certain and short duration no matter how many people are watching this live streaming</li></ul></li><li>Economic<ul><li>“Interactive Service” should have the ability to serve a big live room that has a huge number of audiences</li><li>“Interactive Service” should use fewer resources, less CPU, RAM, disk, networking bandwidth, etc.</li></ul></li></ul><h2 id="Signal-Types"><a href="#Signal-Types" class="headerlink" title="Signal Types"></a>Signal Types</h2><p>Before we discuss the different modelings of “Interactive Service”, we should talk about 3 types of signals whiches should implement in different ways.</p><h3 id="State-Sync-Signal"><a href="#State-Sync-Signal" class="headerlink" title="State Sync Signal"></a>State Sync Signal</h3><p>The clients should init some state just after entering the live room. When the states have been changed, clients should be noticed and do something about these changes.</p><p>A modal implementation is using “Total and Partial Version” to describe state changes of the business state updating of live streaming.</p><p>In this implementation, servers and clients should store the total version and partial versions. Clients should fetch the total version by interval and then fetch the outdated partial versions if the fetched total version is different from the local total version.</p><p><img src="/uploads/persister-how-to-build-a-scalable-live-streaming-interactive-service--e6c9d24ely1h0oc8bkeruj21d90u078y.jpg" alt></p><p>We call this model <code>SS Signal</code> for a shortcut.</p><h3 id="Time-Series-Signal"><a href="#Time-Series-Signal" class="headerlink" title="Time Series Signal"></a>Time Series Signal</h3><p>Time Series Signal is a temporary signal in this live room. The time-series signals that happened before the client entered would not be sent to this client, because the missing of some time-series signals should not affect the experience.</p><p>We can use several ways to implement time-series signals. But there are two different routes to them.</p><ul><li>Using a Messaging System, such as Redis Pub/Sub or Kafka Messaging</li><li>Use a Time Series Database, and fetch them periodically</li></ul><p><img src="/uploads/persister-how-to-build-a-scalable-live-streaming-interactive-service--e6c9d24ely1h0oc8tju01j219g0u0djh.jpg" alt></p><p>We call this model <code>TS Signal</code> for a shortcut.</p><h3 id="Peer-Delivery-Signal"><a href="#Peer-Delivery-Signal" class="headerlink" title="Peer Delivery Signal"></a>Peer Delivery Signal</h3><p>SS signal and Ts signal are designed for all of the people in the same live room. When one of the state change or some action happen, these signals should be delivered to all of the clients in these live room. But peer signals are designed for just some of the people in the live room.</p><p>We could use signals with some filters to implement peer signals, but it will have lots of performance issues.</p><p>A more effective way to treat the peer signal of live streaming as a normal signal on the Instant Messaging System. With a typical Instant Messaging System, we can find which server is the target client connecting, so that sending it signals is efficient.</p><h2 id="Connection-Modeling"><a href="#Connection-Modeling" class="headerlink" title="Connection Modeling"></a>Connection Modeling</h2><p>Servers and the clients should have a way to communicate, called connection modeling. There are different ideas for implementing it, I will explain them briefly.</p><h3 id="C-S-Modeling"><a href="#C-S-Modeling" class="headerlink" title="C/S Modeling"></a>C/S Modeling</h3><p>As we all know, it’s easy to optimize a C/S model, so people usually choose HTTP as a communication protocol between server and client.</p><p>So can we use this model to implement the “Interactive Service”? Sure we can!</p><p>In the most famous IM software Wechat, we saw that every account has its signal list. Clients can request the unread signals via the cursor, after pulling the signals, clients will save the newest cursor to the local storage, and use it for the next request.</p><p>We can use this theory to “Interactive Service” too, but we should make some differences.</p><ul><li>We should split the server into several groups, classify the clients from the live room they attempt to request, and then redirect them to the correct server group.</li><li>We should process the big live rooms and the little live rooms in different ways because some live rooms would have lots of audiences. When the big room is created, we should use all the groups of the server to receive the response.</li></ul><h3 id="CDN-Modeling"><a href="#CDN-Modeling" class="headerlink" title="CDN Modeling"></a>CDN Modeling</h3><p>When we finished the C/S Modeling “Interactive Service”, we could find that the C/S Modeling “Interactive Service” is very much like the CDN Service.</p><p>As we all know, CDN services can achieve higher performance and less latency. So we could use CDN services to help us to accept requests and deliver the signals.</p><h3 id="Server-Push-Modeling"><a href="#Server-Push-Modeling" class="headerlink" title="Server-Push Modeling"></a>Server-Push Modeling</h3><p>When the live room is updated fastly, using a custom application layer based on a proper transport layer is considerable.</p><p>In this way, we could choose WebSocket to reach more compatibility, or use QUIC to reach more efficiency, or just use TCP typically.</p><p>The protocol is easy, but the difficult part is load balancing. </p><p>In HTTP Server, each server is stateless so it’s easier to implement the load balancing. </p><p>In the C/S Modeling part, we talked about the grouping of HTTP Server, the conception works in Server-Push Modeling, too. There are several models of this conception.</p><ul><li>Split up the server into some groups, and each group has its endpoint, the clients choose the targe endpoint by the id of the live room</li><li>Using or implementing an application-level load balancing algorithm.</li></ul><p><img src="/uploads/persister-how-to-build-a-scalable-live-streaming-interactive-service--e6c9d24ely1h0oc72dn9yj21fc0u0afn.jpg" alt></p><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>Buiding a live streaming platform is such a large project, so I cannot write down all of my thoughts in one article.</p><p>But in this part, we have discussed some core concepts of live streaming.</p><ul><li>Differences between Interactive Service and Video Streaming Service;</li><li>Differences between Instant Messages and Live Streaming Signals;</li><li>Different types of Live Streaming signals;</li><li>Different types of Interactive Service connection modelings.</li></ul><p>Next time I will share my thoughts on the scaling method of interactive service, hope you will like it.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Background&quot;&gt;&lt;a href=&quot;#Background&quot; class=&quot;headerlink&quot; title=&quot;Background&quot;&gt;&lt;/a&gt;Background&lt;/h2&gt;&lt;p&gt;Because of the networking improvement 
      
    
    </summary>
    
      <category term="Backend" scheme="https://xhinliang.win/categories/Backend/"/>
    
    
      <category term="Backend" scheme="https://xhinliang.win/tags/Backend/"/>
    
      <category term="LiveStreaming" scheme="https://xhinliang.win/tags/LiveStreaming/"/>
    
      <category term="Live" scheme="https://xhinliang.win/tags/Live/"/>
    
  </entry>
  
  <entry>
    <title>Me and My Game Life</title>
    <link href="https://xhinliang.win/2021/10/uncategorized/me-and-my-game-life/"/>
    <id>https://xhinliang.win/2021/10/uncategorized/me-and-my-game-life/</id>
    <published>2021-10-02T00:00:00.000Z</published>
    <updated>2024-04-24T15:04:19.906Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/uploads/persister-me-and-my-game-life-Witcher-2020-05-19_5ec3eb24973b8_vedmak-3-dikaia-okhota-geralt-tsiri-triss-iennifer-ciri-gera-1056x594.jpg" alt="Witcher"></p><p><strong>Video Games: A Lifelong Journey</strong></p><p>Video games have been a significant part of my life. Recently, I completed “The Witcher 3: Wild Hunt,” renowned as one of the world’s most famous RPGs.</p><p>Although I love video games, I haven’t always dedicated much time to them. My gaming history spans from classic titles like Contra and Ninja Gaiden to iconic PC games such as Counter-Strike and Warcraft. I’ve also enjoyed portable gaming on devices like the Game Boy Advance and PSP, exploring worlds in games like Pokémon and God of War.</p><p>Video games have always offered me hope, happiness, and a boundless imagination. However, they also require time—a resource that was scarce due to my studies. Though I often fell in love with a game, I had to set it aside after a few days to focus on my academics.</p><p>As I transitioned into adulthood, my studies gave way to career challenges. After a long day’s work, fatigue often dulled my interest in engaging titles, especially energy-consuming games like Dota 2 and PUBG. These days, I find myself gravitating towards mobile games, as building a high-end PC setup has become prohibitively expensive.</p><p>However, “The Witcher 3: Wild Hunt” broke this pattern. It captivated me enough to invest nearly three months to complete it—my most significant gaming commitment since university.</p><p>This summer, I invested in a 4K TV and began searching for a console that would match its capabilities. I settled on a used Xbox One X, which proved to be a perfect fit. I immediately stocked up on games optimized for 4K resolution and 60 FPS, including “NBA 2K21,” “Dirt Rally 2.0,” “Titanfall 2,” and “Battlefield 5.”</p><p>Over three months, I devoted considerable time to “Battlefield 5” and “The Witcher 3.” While “Battlefield 5” impressed with its graphics, its short main storyline and the challenges of FPS gameplay on a wireless controller led me to move on quickly. On the other hand, “The Witcher 3” felt right at home on the Xbox with its immersive action RPG elements and comfortable wireless controller setup.</p><p>Despite not being groundbreaking, “The Witcher 3” remains one of the finest fantasy games I’ve ever experienced. It allowed me to traverse vast grasslands and snowy fields, battle monsters with magic and swords, and wander through the cobbled streets of medieval cities.</p><p>After spending substantial time with it, I believe “The Witcher 3” epitomizes the “AAA” game category, which signifies a title developed with significant time, resources, and financial investment. It demanded a lot from me, but also gave much in return.</p><p>Some might question the wisdom of investing time in gaming in today’s hyper-competitive society. To them, I say I am grateful for my Xbox and its games. They enrich my life, bringing satisfaction and joy through virtual adventures. Games are, without a doubt, an essential part of my life.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/uploads/persister-me-and-my-game-life-Witcher-2020-05-19_5ec3eb24973b8_vedmak-3-dikaia-okhota-geralt-tsiri-triss-iennifer-ciri
      
    
    </summary>
    
      <category term="Uncategorized" scheme="https://xhinliang.win/categories/Uncategorized/"/>
    
    
  </entry>
  
  <entry>
    <title>MySQL InnoDB Locks</title>
    <link href="https://xhinliang.win/2021/09/backend/innodb-locks/"/>
    <id>https://xhinliang.win/2021/09/backend/innodb-locks/</id>
    <published>2021-09-13T00:00:00.000Z</published>
    <updated>2024-04-24T15:04:19.906Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/uploads/persister-innodb-locks-MySQL-1200px-MySQL.svg.png" alt="MySQL"></p><h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><p>InnoDB is a storage engine for MySQL.<br>After more than ten years of development, InnoDB has becomed the most common storage engine in Internet compony usages.</p><p>There are lots of articles talk over the locks of InnoDB, and today I am going to discuss them again.</p><h2 id="SHOW-YOUR-LOCKS-IN-MYSQL"><a href="#SHOW-YOUR-LOCKS-IN-MYSQL" class="headerlink" title="SHOW YOUR LOCKS IN MYSQL"></a>SHOW YOUR LOCKS IN MYSQL</h2><p>To learn the locks effectively, you should learn to show the locks of current database.</p><p>Typing this command in mysql client, and you will get all of the locks whiches InnoDB is holding.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from performance_schema.data_locks\G</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">               ENGINE: INNODB</span><br><span class="line">       ENGINE_LOCK_ID: 140616303283528:1157:140616462868960</span><br><span class="line">ENGINE_TRANSACTION_ID: 4492</span><br><span class="line">            THREAD_ID: 58</span><br><span class="line">             EVENT_ID: 75</span><br><span class="line">        OBJECT_SCHEMA: xhinliang_test <span class="comment">--- the database you used</span></span><br><span class="line">          OBJECT_NAME: locking_test <span class="comment">--- the table which of the lock occur</span></span><br><span class="line">       PARTITION_NAME: NULL</span><br><span class="line">    SUBPARTITION_NAME: NULL</span><br><span class="line">           INDEX_NAME: NULL</span><br><span class="line">OBJECT_INSTANCE_BEGIN: 140616462868960</span><br><span class="line">            LOCK_TYPE: TABLE <span class="comment">--- TABLE or RECORD, we will explain it below</span></span><br><span class="line">            LOCK_MODE: IX <span class="comment">--- several options, we will explain it below</span></span><br><span class="line">          LOCK_STATUS: GRANTED <span class="comment">--- whether the lock is granted or waiting?</span></span><br><span class="line">            LOCK_DATA: NULL <span class="comment">-- index of the lock using</span></span><br></pre></td></tr></table></figure><p>We have learnd the way to show the locks of current database in the code block above, and we notice that there are some key fileds whe should care about.</p><ul><li>INDEX_NAME The name of the locked index, always non-NULL for innoDB tables.</li><li>LOCK_TYPE </li><li>LOCK_MODE</li><li>LOCK_STATUS</li><li>LOCK_DATA</li></ul><p>In these five fields, we can learn mostly all of the information we regard.</p><h3 id="LOCK-TYPE"><a href="#LOCK-TYPE" class="headerlink" title="LOCK_TYPE"></a>LOCK_TYPE</h3><p>LOCK_TYPE is the first filed and the most easy field we got, it can be TABLE or RECORD, indicates that the scope of this lock affected to.</p><h3 id="LOCK-MODE"><a href="#LOCK-MODE" class="headerlink" title="LOCK_MODE"></a>LOCK_MODE</h3><p>LOCK_MODE is the most difficult field in this post, people always make it mixed with LOCK_TYPE.</p><p>LOCK_MODE has several options</p><ul><li>IX -&gt; Intention Exclusive Lock</li><li>IS -&gt; Intention Share Lock</li><li>X,REC_NOT_GAP -&gt; Exclusive Record Lock</li><li>X,GAP -&gt; Exclusive Gap Lock</li><li>X -&gt; Exclusive Next-Key Lock</li><li>S,REC_NOT_GAP -&gt; Share Record Lock</li><li>S,GAP -&gt; Share Gap Lock</li><li>S -&gt; Share Next-Key Lock</li></ul><h3 id="LOCK-STATUS"><a href="#LOCK-STATUS" class="headerlink" title="LOCK_STATUS"></a>LOCK_STATUS</h3><p>LOCK_STATUS show the aquire status of this lock, could be GRANTED or WAITING.<br>When the LOCK_STATUS is GRANTED means that the session aquired this lock, otherwise means that the session of this lock is waiting.</p><h3 id="LOCK-DATA"><a href="#LOCK-DATA" class="headerlink" title="LOCK_DATA"></a>LOCK_DATA</h3><p>LOCK_DATA indicates which rows are this lock affected for.</p><p>For Example, when there are a table named <code>child</code> and have some record initially.</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; desc child;</span><br><span class="line"><span class="code">+-------+</span>------<span class="code">+------+</span>-----<span class="code">+---------+</span>-------+</span><br><span class="line">| Field | Type | Null | Key | Default | Extra |</span><br><span class="line"><span class="code">+-------+</span>------<span class="code">+------+</span>-----<span class="code">+---------+</span>-------+</span><br><span class="line">| id    | int  | NO   | PRI | NULL    |       |</span><br><span class="line"><span class="code">+-------+</span>------<span class="code">+------+</span>-----<span class="code">+---------+</span>-------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from child</span><br><span class="line"><span class="code">    -&gt; ;</span></span><br><span class="line"><span class="code">+-----+</span></span><br><span class="line">| id  |</span><br><span class="line"><span class="code">+-----+</span></span><br><span class="line">|  89 |</span><br><span class="line">|  90 |</span><br><span class="line">| 102 |</span><br><span class="line">| 151 |</span><br><span class="line"><span class="code">+-----+</span></span><br><span class="line">4 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><p>And then we begin an session an lock a nonexistent row.<br><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; <span class="keyword">begin</span>;</span><br><span class="line">Query OK, <span class="number">0</span> rows affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; <span class="keyword">select</span> * <span class="keyword">from</span> child <span class="keyword">where</span> id = <span class="number">100</span> <span class="keyword">for</span> update;</span><br><span class="line"><span class="keyword">Empty</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure></p><p>When we query the locks of this database, we can see that the (90, 102) have been lock as Exclusive Gap Lock.</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">mysql&gt;</span> <span class="string">select</span> <span class="string">*</span> <span class="string">from</span> <span class="string">performance_schema.data_locks\G</span></span><br><span class="line"><span class="string">***************************</span> <span class="number">1</span><span class="string">.</span> <span class="string">row</span> <span class="string">***************************</span></span><br><span class="line">               <span class="attr">ENGINE:</span> <span class="string">INNODB</span></span><br><span class="line">       <span class="attr">ENGINE_LOCK_ID:</span> <span class="number">140459538615624</span><span class="string">:1158:140458948850848</span></span><br><span class="line"><span class="attr">ENGINE_TRANSACTION_ID:</span> <span class="number">5640</span></span><br><span class="line">            <span class="attr">THREAD_ID:</span> <span class="number">49</span></span><br><span class="line">             <span class="attr">EVENT_ID:</span> <span class="number">25</span></span><br><span class="line">        <span class="attr">OBJECT_SCHEMA:</span> <span class="string">xhinliang_test</span></span><br><span class="line">          <span class="attr">OBJECT_NAME:</span> <span class="string">child</span></span><br><span class="line">       <span class="attr">PARTITION_NAME:</span> <span class="literal">NULL</span></span><br><span class="line">    <span class="attr">SUBPARTITION_NAME:</span> <span class="literal">NULL</span></span><br><span class="line">           <span class="attr">INDEX_NAME:</span> <span class="literal">NULL</span></span><br><span class="line"><span class="attr">OBJECT_INSTANCE_BEGIN:</span> <span class="number">140458948850848</span></span><br><span class="line">            <span class="attr">LOCK_TYPE:</span> <span class="string">TABLE</span></span><br><span class="line">            <span class="attr">LOCK_MODE:</span> <span class="string">IX</span></span><br><span class="line">          <span class="attr">LOCK_STATUS:</span> <span class="string">GRANTED</span></span><br><span class="line">            <span class="attr">LOCK_DATA:</span> <span class="literal">NULL</span></span><br><span class="line"><span class="string">***************************</span> <span class="number">2</span><span class="string">.</span> <span class="string">row</span> <span class="string">***************************</span></span><br><span class="line">               <span class="attr">ENGINE:</span> <span class="string">INNODB</span></span><br><span class="line">       <span class="attr">ENGINE_LOCK_ID:</span> <span class="number">140459538615624</span><span class="string">:3:4:3:140459473245216</span></span><br><span class="line"><span class="attr">ENGINE_TRANSACTION_ID:</span> <span class="number">5640</span></span><br><span class="line">            <span class="attr">THREAD_ID:</span> <span class="number">49</span></span><br><span class="line">             <span class="attr">EVENT_ID:</span> <span class="number">25</span></span><br><span class="line">        <span class="attr">OBJECT_SCHEMA:</span> <span class="string">xhinliang_test</span></span><br><span class="line">          <span class="attr">OBJECT_NAME:</span> <span class="string">child</span></span><br><span class="line">       <span class="attr">PARTITION_NAME:</span> <span class="literal">NULL</span></span><br><span class="line">    <span class="attr">SUBPARTITION_NAME:</span> <span class="literal">NULL</span></span><br><span class="line">           <span class="attr">INDEX_NAME:</span> <span class="string">PRIMARY</span></span><br><span class="line"><span class="attr">OBJECT_INSTANCE_BEGIN:</span> <span class="number">140459473245216</span></span><br><span class="line">            <span class="attr">LOCK_TYPE:</span> <span class="string">RECORD</span></span><br><span class="line">            <span class="attr">LOCK_MODE:</span> <span class="string">X,GAP</span></span><br><span class="line">          <span class="attr">LOCK_STATUS:</span> <span class="string">GRANTED</span></span><br><span class="line">            <span class="attr">LOCK_DATA:</span> <span class="number">102</span></span><br><span class="line"><span class="number">2</span> <span class="string">rows</span> <span class="string">in</span> <span class="string">set</span> <span class="string">(0.01</span> <span class="string">sec)</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/uploads/persister-innodb-locks-MySQL-1200px-MySQL.svg.png&quot; alt=&quot;MySQL&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;Overview&quot;&gt;&lt;a href=&quot;#Overview&quot; class=&quot;heade
      
    
    </summary>
    
      <category term="Backend" scheme="https://xhinliang.win/categories/Backend/"/>
    
    
      <category term="Backend" scheme="https://xhinliang.win/tags/Backend/"/>
    
      <category term="MySQL" scheme="https://xhinliang.win/tags/MySQL/"/>
    
      <category term="InnoDB" scheme="https://xhinliang.win/tags/InnoDB/"/>
    
      <category term="Lock" scheme="https://xhinliang.win/tags/Lock/"/>
    
  </entry>
  
  <entry>
    <title>给 Markdown 程序员的写作能力提升指南</title>
    <link href="https://xhinliang.win/2020/04/uncategorized/writing-guide-for-markdown-programer/"/>
    <id>https://xhinliang.win/2020/04/uncategorized/writing-guide-for-markdown-programer/</id>
    <published>2020-04-09T00:00:00.000Z</published>
    <updated>2024-04-24T15:04:19.906Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近完成了一次多次打磨的技术分享，在准备分享和进行分享的过程中，遇到了很多问题，而造成这些问题的根源，就是自己日渐低下的写作水平和表达能力。</p><p>在本篇文章中，我会先基于自己的看法，分析写作能力对程序员的作用，然后基于自己的参考和实践，给出一个比较标准的程序员写作的套路，最后给出一些常用的辅助程序员写作的软件，并分析这些软件的特点。</p><h2 id="写作能力真的有用吗"><a href="#写作能力真的有用吗" class="headerlink" title="写作能力真的有用吗"></a>写作能力真的有用吗</h2><p>很多工科的学生会认为写作能力对个人水平的提升没有什么实际作用，甚至会调侃『代码写得好的，不如 PPT 讲得好的』。在参与工作这几年中，我对这些观点也越来越不赞同。</p><p>首先，写作能力的提升有利于提升人的结构化思考能力。<br>写作是给人看的，写代码是给人和机器看的。是的，一份好的代码，首先需要具有可读性，如果一份代码可读性很差，甚至已经无法维护，那么这份代码的价值就会大打折扣。<br>一篇好的文章，应该有清晰的层级和流畅的文笔，同样，一份好的代码，也应该有统一的命名和明确的流程。如果一篇文章的层级关系很不明确，各个章节中的衔接也非常生硬，那么这篇文章的读者在阅读的时候就会有一种云里雾里的感觉。<br>如果一个程序员脑海里对某个代码逻辑思考充分，那么他在编写这段逻辑的代码时也会行云流水。类比一下写作，如果一个程序员对他的文章里要表达的内容了如指掌，那么他写出来的文章也不会晦涩难懂。</p><p>其次，写作能力的提升有利于言语表达能力的提升。<br>我很多时候会提笔忘字，就像我在跟别人讨论问题的时候会语无伦次一样。这个时候我可能会说，等我在聊天工具上组织好语言再以文字的形式发给你。<br>当我在聊天工具上组织语言的时候，我会发现，经过多次的改动和校正，我终于将自己要表达的意思完完整整地正确表达了出来。<br>是的，言语表达不清楚的时候，使用文字依然很难表达出来。但又因为文字表达的场景要求通常比言语表达要低很多，所以我们可以通过锻炼文字表达能力来间接性地提高自己的言语表达能力。</p><p>最后，写作能力的提升有利于程序员学习知识的落地。<br>很多优秀的程序员都有写博客的习惯。写博客能加深自己对知识的了解，并让知识更好地沉淀。俗话说好记性不如烂笔头，而博客通常就是程序员最好的烂笔头。<br>但我们有很多的程序员没有写博客的习惯，或者说坚持不下去。我认为坚持不下去的最主要原因是：不想让别人读到这么烂的文章，降低自己在别人的形象。<br>如果因为害怕曝光而不写作，那么写作能力就会恶性循环地下降。如果我们能逐渐提升自己的写作能力，那么写出来的博客的质量自然也会慢慢提高，此时自己写博客的习惯也能建立起来。</p><h2 id="程序员写作的套路"><a href="#程序员写作的套路" class="headerlink" title="程序员写作的套路"></a>程序员写作的套路</h2><p>现在 Markdown 在程序员中已经非常普及了，很多人平时的文档和笔记都使用 Markdown 完成。我自然也是一个 Markdown 重度使用者。在多年的 Markdown 写作中，我总结出一些自己的经验和教训。</p><p>第一，在创作的时候不要注重排版。<br>正在文思泉涌的时候，最好就疯狂输出文字，至于排版这些稀碎的小事，可以在草稿完成后再进行处理，如果在创作的时候将太多的时间花在处理排版上，很有可能思绪会被打断。</p><p>第二，不要使用太多的 Markdown 语法。<br>我以前特别喜欢使用 Markdown 的语法，例如 <code>code</code> <em>斜体</em>  <strong>强调</strong>，还有各种大大小小的标题。当我回过头来阅读我之前写过的 Markdown 文章的时候，我发现越是标题层级复杂的文章行文越不流畅。标题的插入，某种程度上会让文章的上下文衔接变得不自然。</p><p>第三，要对写作这件事情多加练习。<br>对于很多高中毕业已经五六年的人来说，重拾写作这件事情本来难度就不低。如果让我将我写出来的所有的文字，所有的笔记都分享出来的话，估计有很多人会笑掉大牙。但因为惧怕曝光就不进行写作是不对的，越是惧怕写作，写作能力下降得也会越厉害。我现在会每周强迫自己进行至少 2000 字的写作，这些文字很有可能只保存在我自己的网盘中，如果有特别值得分享的，或者写得特别好的，我才会分享出来。</p><h2 id="工具分享"><a href="#工具分享" class="headerlink" title="工具分享"></a>工具分享</h2><p>Markdown 写作工具层出不穷，花样繁多。每个人可能都有自己偏好的一些工具。在这里，我结合自己的使用经验和别人的推荐，分享一些常用的软件和工具。</p><h3 id="VS-Code-Markdown-Preview-Enhanced"><a href="#VS-Code-Markdown-Preview-Enhanced" class="headerlink" title="VS Code + Markdown Preview Enhanced"></a>VS Code + Markdown Preview Enhanced</h3><p>VS Code 我大概不用介绍了，是一个文本编辑器，同时也是一个轻量级的 IDE。平常我会使用它进行 Markdown 文本创作。在创作的过程中，我不会使用太多的插件，一般就是把他当做一个纯文本的编辑器使用。在检索自己的资料的时候，会经常使用 VS Code 的文本搜索功能，很方便。</p><p>Markdown Preview Enhanced 是一个很著名的 Markdown 插件，我通过它在 VS Code 上渲染 Markdown 查看效果。当然它也支持很多原生 Markdown 不支持的功能，例如 puml 渲染，甘特图渲染等，但我最近没有在使用这些功能了，因为觉得使用文本画图效率不是太高。</p><p><img src="/uploads/persister-writing-guide-for-markdown-programer-MPE-28227953-eb6eefa4-68a1-11e7-8769-96ea83facf3b.png" alt="MPE"></p><h3 id="坚果云"><a href="#坚果云" class="headerlink" title="坚果云"></a>坚果云</h3><p>坚果云是为我提供了个人的云盘，Markdown 文件很小，免费版的坚果云流量限额已经完全足够。我自己有多台设备，我会在各个设备安装坚果云，并开启同步，基本能达到无缝切换的效果。如果我需要在手机上阅读和查找，手机的坚果云客户端也完全能满足我的需求。</p><p><img src="/uploads/persister-writing-guide-for-markdown-programer-nutcloud-normal.jpg" alt="nutcloud"></p><h3 id="iPic-persister"><a href="#iPic-persister" class="headerlink" title="iPic + persister"></a>iPic + persister</h3><p>iPic 是一个图床管理器，支持将截图上传到图床，并直接给出 Markdown 的图片格式。免费版的 iPic 只支持微博图床，而微博图床经常出现 403 的情况，所以我自己写了一个程序，支持将 Markdown 文件的图片下载到本地，然后替换 Markdown 的图片链接，具体可以参考 <a href="https://github.com/XhinLiang/persister" target="_blank" rel="noopener">persister</a>。</p><h3 id="Draw-io"><a href="#Draw-io" class="headerlink" title="Draw.io"></a>Draw.io</h3><p>Draw.io 是一个开源的画图工具，基本功能跟 processon 类似，但是免费的，而且支持多种存储。我习惯使用它的桌面版客户端，然后使用坚果云提供的本地存储。画图结束后，我习惯输出 svg 格式的图片，然后在 Markdown 中引用。</p><p><img src="/uploads/persister-writing-guide-for-markdown-programer-drawio-v2-45382597c219dca9114d65900d5c868a_1200x500.jpg" alt="drawio"></p><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>本篇文章算是这个月我给自己设定的目标之一。<br>通过落地本篇文章，希望能让自己养成一个坚持写作的好习惯，顺带提升自己的表达能力和结构化思考能力。<br>前路漫漫，未来可期。</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul><li><a href="https://thewriter.dev/perface/" target="_blank" rel="noopener">给程序员的写作课</a></li><li><a href="https://studyidea.cn/write_tools" target="_blank" rel="noopener">坚持写作快两年了，有些私藏工具跟你们分享</a></li><li><a href="http://zhangtielei.com/posts/blog-kungfu-flow-well-being.html" target="_blank" rel="noopener">心流：写作、编程和修炼武功的共同法门</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;最近完成了一次多次打磨的技术分享，在准备分享和进行分享的过程中，遇到了很多问题，而造成这些问题的根源，就是自己日渐低下的写作水平和表达能力。
      
    
    </summary>
    
      <category term="Uncategorized" scheme="https://xhinliang.win/categories/Uncategorized/"/>
    
    
  </entry>
  
  <entry>
    <title>自我时间管理</title>
    <link href="https://xhinliang.win/2020/03/uncategorized/self-time-managment/"/>
    <id>https://xhinliang.win/2020/03/uncategorized/self-time-managment/</id>
    <published>2020-03-08T00:00:00.000Z</published>
    <updated>2024-04-24T15:04:19.906Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h1><p>现在开始尝试一个更规范的自我时间管理机制。<br>新的机制主要由三个工具支撑，番茄土豆、坚果云，VSCode。<br>番茄土豆主要用于管理细碎的时间和待办事项，坚果云用于存储更宏观的计划和日志，而 VSCode 用于管理坚果云的文件。</p><p><img src="/uploads/manage-self-time/pomodoro.png" alt></p><h1 id="制定-OKR"><a href="#制定-OKR" class="headerlink" title="制定 OKR"></a>制定 OKR</h1><p>每两个月需要制定一次个人 OKR，落实到 okr.md 文件。<br>为了聚焦，Objective 一般定义为三个以内。<br>Objective 需要定义 Key Result，这些 Key Result 需要可以量化。<br>制定好 OKR 后，在坚果云中建立这两个月的文件夹，例如 2020-march-aprill，然后将 okr.md 文件放到此文件夹中。<br>接下来的两个月的个人时间管理会围绕这两个月的 OKR 进行。</p><h1 id="灵感"><a href="#灵感" class="headerlink" title="灵感"></a>灵感</h1><p>在 OKR 制定完成后，随着时间的推移，对于 OKR 如何完成会有一些想法。<br>这些想法氛围大想法和小想法。大想法一般需要更多的时间完成，而小想法通常只需要一到两个番茄时间即可。</p><p>对于大想法，写到 okr.md 中，等到下个 sprint 再安排时间。<br>对于小想法，如果本周有充足的时间可以完成，则加到番茄土豆的待办事项中，如果没有，也放到 ork.md 中。</p><p>如果有一些无关 OKR 的想法，也可以记录到 okr.md 中，等到下个 okr 再进行安排制定。</p><h1 id="制定-Sprint"><a href="#制定-Sprint" class="headerlink" title="制定 Sprint"></a>制定 Sprint</h1><p>每周需要定义一个 sprint 文件，例如 sprint-march-1.md。<br>此文件会记录本周的个人时间管理的结果，应尽量保证可读性。</p><p>sprint 文件必须包含的内容有：<br>本周目标。本周目标是相对比较大的工作，通常是 OKR 的拆解。例如 <code>系统学习 ZooKeeper 相关的组件及实现原理</code><br>每日回顾。每天应该回顾一下自己工作和学习中值得记录的事情，学习了某篇很有意义的文章，可以将文章概要写下来；解决了某个 bug，可以将 bug 解决的过程记录下来。俗话说好记性不如烂笔头，希望这样一个机制能够让自己将知识更好地沉淀下来。<br>本周总结。将本周完成的目标和感触写下来，达到复习的目的。</p><h1 id="初始化待办事项"><a href="#初始化待办事项" class="headerlink" title="初始化待办事项"></a>初始化待办事项</h1><p>每周日，将本周需要完成的目标，写到 sprint 文件中，称为本周目标。</p><p>本周目标的制定，跟本周可用时间有关。<br>每个目标，最好能够细化出完成目标预计需要花费的时间，而且需要跟本周可用时间一起配置。如果本周的可用时间较多，那么本周目标可以设定的更多一些。</p><h1 id="执行"><a href="#执行" class="headerlink" title="执行"></a>执行</h1><p>在每日的执行工作中，强依赖番茄土豆这个工具，主要包括两方面：</p><ol><li>每日使用番茄钟来计算本日使用的时间。我手动将番茄钟的时间调整为 30 分钟，这里是为了便于计算每日花费时间。</li><li>将每天做的事情，使用番茄土豆的待办事项进行管理。</li></ol><h2 id="温习"><a href="#温习" class="headerlink" title="温习"></a>温习</h2><p>每日工作完成后，需要对本日的学习和工作做一份总结，总结的来源一般是 git log 和番茄土豆的待办事项完成记录。<br>对于本日完成的有意义的事情，最好能够做一些概要性的描述。</p><p>每周工作完成后，回顾一遍 sprint.md，并根据每日目标的完成情况编写本周总结。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Overview&quot;&gt;&lt;a href=&quot;#Overview&quot; class=&quot;headerlink&quot; title=&quot;Overview&quot;&gt;&lt;/a&gt;Overview&lt;/h1&gt;&lt;p&gt;现在开始尝试一个更规范的自我时间管理机制。&lt;br&gt;新的机制主要由三个工具支撑，番茄土豆、坚果
      
    
    </summary>
    
      <category term="Uncategorized" scheme="https://xhinliang.win/categories/Uncategorized/"/>
    
    
  </entry>
  
  <entry>
    <title>在 macOS 中使用命令行打开 VSCode</title>
    <link href="https://xhinliang.win/2019/02/computer/code-tools/open-vscode-via-terminal-in-macos/"/>
    <id>https://xhinliang.win/2019/02/computer/code-tools/open-vscode-via-terminal-in-macos/</id>
    <published>2019-02-15T00:00:00.000Z</published>
    <updated>2024-04-24T15:04:19.906Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/uploads/new--006tKfTcgy1g07apvz6gfj31660u07h1.jpg" alt><br>VSCode 相信已经是大家的必备编辑器了，轻量，免费。<br>在 Linux 环境中， VSCode 可以通过图标启动，也可以通过命令行启动。<br>例如，我想在 VSCode 中打开这个文件夹，可以这样：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ code someCodeProject</span><br></pre></td></tr></table></figure></p><p>但是在 macOS 下默认是不能操作的，因为没有 <code>code</code> 这个程序。<br>我们可以伪造一个：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ cat code</span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">TARGET_DIR=<span class="string">"."</span></span><br><span class="line"><span class="keyword">if</span> [ -n <span class="string">"<span class="variable">$1</span>"</span> ]; <span class="keyword">then</span></span><br><span class="line">TARGET_DIR=<span class="string">"<span class="variable">$1</span>"</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line">nohup /Applications/Visual\ Studio\ Code.app/Contents/MacOS/Electron <span class="variable">$TARGET_DIR</span> &gt; /dev/null 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure><p>然后，把 <code>code</code> 所在的目录加入到 <code>PATH</code> 环境变量中，即可。</p><p>给个示例：<br><img src="/uploads/new--006tKfTcgy1g07arzgl7ij30u604djt7.jpg" alt><br><img src="/uploads/new--006tKfTcgy1g07asgll76j30u20mggrj.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/uploads/new--006tKfTcgy1g07apvz6gfj31660u07h1.jpg&quot; alt&gt;&lt;br&gt;VSCode 相信已经是大家的必备编辑器了，轻量，免费。&lt;br&gt;在 Linux 环境中， VSCode 可以通过图标启动，也可以通过命
      
    
    </summary>
    
      <category term="Computer" scheme="https://xhinliang.win/categories/Computer/"/>
    
    
      <category term="macOS" scheme="https://xhinliang.win/tags/macOS/"/>
    
  </entry>
  
  <entry>
    <title>安装 Ubuntu Workstation 之后要做的事儿</title>
    <link href="https://xhinliang.win/2019/01/computer/code-tools/init-ubuntu/"/>
    <id>https://xhinliang.win/2019/01/computer/code-tools/init-ubuntu/</id>
    <published>2019-01-11T00:00:00.000Z</published>
    <updated>2024-04-24T15:04:19.906Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/uploads/new--2000px-Former_Ubuntu_logo.png" alt="logo"></p><p>最近自己心爱的 Dell Latitude E6430s 频繁死机，以为是硬盘问题，格式化硬盘重装系统问题依旧。<br>硬件检查才发现是一根内存有了问题，取出问题的内存后一切正常。</p><p>但删掉的系统是需要重装的，经过一些实践后，我选择了 Ubuntu 16.04 LTS 作为我新的操作系统。</p><p>都 2019 年了，为什么还要选择老旧的 Ubuntu 16.04 呢？<br>其实我之前试过了几个 Linux 发行版，都有一些问题：</p><ul><li>Ubuntu 14.04 LTS，这也是我之前一直使用的发行版，稳定性尚可，但很快就结束维护了。</li><li>Manjaro Xfce/i3wm，可能我的电脑硬件太老旧了，pacman -SYy 之后基本就滚挂了，试了几遍都这样，无奈放弃。</li><li>Fedora，官方貌似只维护 Gnome 版本，不太喜欢，放弃。</li><li>Ubuntu 18.04 LTS，桌面也换成了 Gnome，非常别扭别扭，放弃。</li></ul><p>最后试了下 Ubuntu 16.04 LTS，安装非常顺利，基本配置以后也非常顺手，所以就硬定他了。</p><h2 id="双系统安装"><a href="#双系统安装" class="headerlink" title="双系统安装"></a>双系统安装</h2><p>本次安装还是 Windows 10 + Ubuntu 16.04 双系统。<br>我的主硬盘是一块 480G 的固态硬盘，所以我还是依照原来的方案，把两个系统都装在这个硬盘。</p><h3 id="Step-0"><a href="#Step-0" class="headerlink" title="Step 0"></a>Step 0</h3><p>Windows 10 安装，先格式化整个硬盘，并将分区表修改为 GPT 格式<br>使用配置好的 UEFI U盘启动后，在第一个界面 Shift + F10 进入命令行环境：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">diskpart</span><br><span class="line">clean</span><br><span class="line">convert gpt</span><br></pre></td></tr></table></figure></p><p>然后分出 200G 给 Windows 10，Windows 安装程序会自动再分出三个小分区，我们只需要关注其中 100M 的那个 EFI 分区，此分区的文件系统是 FAT32，应该非常好辨认。</p><h3 id="Step-1"><a href="#Step-1" class="headerlink" title="Step 1"></a>Step 1</h3><p>Windows 10 顺利安装完成，用 UltraISO（还可以使用别的工具，随意了） 把 Ubuntu 的 ISO 文件写入U盘。<br>然后重启进入 Ubuntu Live 系统。</p><p>选择安装。<br>手动分区。<br>分出一个 EXT4 文件系统的分区，大小是 12G，分区类型是 <code>SWAP</code>（事实上就是虚拟内存）。<br>剩下的 250G 再分出一个 EXT4 的分区，没有分区类型，此分区直接挂载到 <code>/</code>（根目录）。<br>然后最下方的启动磁盘直接选择整个固态硬盘（我这边好像是 SDA ）</p><p>确认安装，应该没问题了。</p><h2 id="初始化系统"><a href="#初始化系统" class="headerlink" title="初始化系统"></a>初始化系统</h2><h3 id="修改-home-目录下的文件夹目录为英文"><a href="#修改-home-目录下的文件夹目录为英文" class="headerlink" title="修改 home 目录下的文件夹目录为英文"></a>修改 home 目录下的文件夹目录为英文</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> LANG=en_US</span><br><span class="line">xdg-user-dirs-gtk-update</span><br><span class="line"></span><br><span class="line"><span class="comment"># 此时会弹出弹框，确认即可</span></span><br><span class="line"><span class="comment"># 再把语言设回来</span></span><br><span class="line"><span class="built_in">export</span> LANG=zh_CN</span><br></pre></td></tr></table></figure><h3 id="安装必备的软件"><a href="#安装必备的软件" class="headerlink" title="安装必备的软件"></a>安装必备的软件</h3><p>以下软件手动寻找 deb 安装文件，使用 dpkg 安装即可：</p><ul><li>VS Code</li><li>Chrome</li><li>5hadow5ocks-QT5</li><li>Nutcloud</li><li>网易云音乐</li></ul><h3 id="解决输入法问题"><a href="#解决输入法问题" class="headerlink" title="解决输入法问题"></a>解决输入法问题</h3><p>官网下载 deb 格式的安装包<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo dpkg -i sogoupinyin_2.2.0.0108_amd64.deb</span><br><span class="line">sudo apt-get -f install <span class="comment"># 解决依赖冲突问题</span></span><br></pre></td></tr></table></figure></p><h3 id="删掉亚马逊"><a href="#删掉亚马逊" class="headerlink" title="删掉亚马逊"></a>删掉亚马逊</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get remove unity-webapps-common</span><br></pre></td></tr></table></figure><h2 id="美化命令行"><a href="#美化命令行" class="headerlink" title="美化命令行"></a>美化命令行</h2><p>以下步骤按对应的说明安装即可<br>安装 oh-my-zsh<br>安装 ZSH 主题 <a href="https://github.com/bhilburn/powerlevel9k" target="_blank" rel="noopener">https://github.com/bhilburn/powerlevel9k</a><br>安装 Powerline 字体 <a href="https://github.com/powerline/fonts" target="_blank" rel="noopener">https://github.com/powerline/fonts</a> 直接 clone 代码库，install 完事儿</p><h3 id="安装几个-ZSH-插件"><a href="#安装几个-ZSH-插件" class="headerlink" title="安装几个 ZSH 插件"></a>安装几个 ZSH 插件</h3><p>自行安装</p><ul><li>zsh-autosuggestions</li><li>zsh-syntax-highlighting</li><li><a href="https://github.com/romkatv/powerlevel10k" target="_blank" rel="noopener">https://github.com/romkatv/powerlevel10k</a></li></ul><h2 id="安装必备开发工具"><a href="#安装必备开发工具" class="headerlink" title="安装必备开发工具"></a>安装必备开发工具</h2><p>安装 <code>n</code> &amp;&amp; <code>node</code><br>k-vim <a href="https://github.com/wklken/k-vim" target="_blank" rel="noopener">https://github.com/wklken/k-vim</a></p><p>安装 <code>golang</code><br><a href="https://xhinliang.win/2018/10/30/2018/nsq/nsq-part1-set-up-env/">https://xhinliang.win/2018/10/30/2018/nsq/nsq-part1-set-up-env/</a></p><p>安装 Oracle JDK 11<br><a href="https://www.oracle.com/technetwork/java/javase/downloads/jdk11-downloads-5066655.html" target="_blank" rel="noopener">https://www.oracle.com/technetwork/java/javase/downloads/jdk11-downloads-5066655.html</a></p><h3 id="设置-Golang-的安装目录"><a href="#设置-Golang-的安装目录" class="headerlink" title="设置 Golang 的安装目录"></a>设置 Golang 的安装目录</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> GOROOT=<span class="string">"<span class="variable">$HOME</span>/cli-utils/golang/go"</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="string">"<span class="variable">$GOROOT</span>/bin:<span class="variable">$PATH</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### 设置 GOPATH</span></span><br><span class="line"><span class="built_in">export</span> GOPATH=<span class="string">"<span class="variable">$HOME</span>/go"</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="string">"<span class="variable">$GOPATH</span>/bin:<span class="variable">$PATH</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### Java</span></span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=<span class="string">"/usr/lib/jvm/jdk-11.0.1"</span></span><br><span class="line"><span class="built_in">export</span> JRE_HOME=<span class="string">"<span class="variable">$JAVA_HOME</span>/jre"</span></span><br><span class="line"><span class="built_in">export</span> CLASSPATH=<span class="string">".:<span class="variable">$JAVA_HOME</span>/lib:<span class="variable">$JRE_HOME</span>/lib:<span class="variable">$CLASSPATH</span>"</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="string">"<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$JRE_HOME</span>/bin:<span class="variable">$PATH</span>"</span></span><br></pre></td></tr></table></figure><h3 id="配置小飞机"><a href="#配置小飞机" class="headerlink" title="配置小飞机"></a>配置小飞机</h3><p>地址忽略</p><p>小飞机的本地代理可以直接使用 HTTP 形式，所以可以直接用 HTTP 代理暴露出来，然后使用<br><code>google-chrome --proxy-server=&quot;http://localhost:1080&quot;</code><br>这个命令给 chrome 配置 proxy 并启动，然后登录原来的账号，就可以安装上各种插件，包括 SwitchyOmega</p><p>安装 proxychains 并配置<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install proxychains</span><br><span class="line">sudo vim /etc/proxychains.conf</span><br></pre></td></tr></table></figure></p><h3 id="autojump"><a href="#autojump" class="headerlink" title="autojump"></a>autojump</h3><p><a href="https://github.com/wting/autojump" target="_blank" rel="noopener">https://github.com/wting/autojump</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git://github.com/wting/autojump.git</span><br><span class="line"><span class="built_in">cd</span> autojump</span><br><span class="line">./install.py</span><br></pre></td></tr></table></figure><p>~/.zshrc 文件加上 plugin，并加上 autojump 提示的那两行<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">plugins=(</span><br><span class="line">  git</span><br><span class="line">  zsh-autosuggestions</span><br><span class="line">  zsh-syntax-highlighting</span><br><span class="line">  <span class="comment"># ...</span></span><br><span class="line">  autojump</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># autojump</span></span><br><span class="line">[[ -s /home/xhinliang/.autojump/etc/profile.d/autojump.sh ]] &amp;&amp; <span class="built_in">source</span> /home/xhinliang/.autojump/etc/profile.d/autojump.sh</span><br><span class="line"><span class="built_in">autoload</span> -U compinit &amp;&amp; compinit -u</span><br></pre></td></tr></table></figure></p><h3 id="配置舒适的日志记录环境"><a href="#配置舒适的日志记录环境" class="headerlink" title="配置舒适的日志记录环境"></a>配置舒适的日志记录环境</h3><p>我习惯使用 VSCode + 坚果云 + Markdown 记日志。<br>但默认的 Markdown 不支持 PlantUML 的绘制，我们加上插件让他更完美些。</p><ol><li>在 VSCode 中安装 <code>markdown preview enhanced</code> 插件</li><li><code>sudo apt-get install graphviz</code></li><li><p>下载 plantuml.jar 放到 <code>$HOME/cli-utils/jars</code> 文件夹并把这个文件夹加到 PATH 环境变量中：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> PLANTUML_JAR=<span class="string">"<span class="variable">$HOME</span>/cli-utils/jars"</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="string">"<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$PLANTUML_JAR</span>:<span class="variable">$PATH</span>"</span></span><br></pre></td></tr></table></figure></li><li><p>安装图床上传工具 <a href="https://github.com/klesh/fu" target="_blank" rel="noopener">fu</a></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">tar</span> 包编译失败了</span><br><span class="line">源代码编译成功，但是运行失败。。</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/uploads/new--2000px-Former_Ubuntu_logo.png&quot; alt=&quot;logo&quot;&gt;&lt;/p&gt;
&lt;p&gt;最近自己心爱的 Dell Latitude E6430s 频繁死机，以为是硬盘问题，格式化硬盘重装系统问题依旧。&lt;br&gt;硬件检
      
    
    </summary>
    
      <category term="Computer" scheme="https://xhinliang.win/categories/Computer/"/>
    
    
      <category term="Linux" scheme="https://xhinliang.win/tags/Linux/"/>
    
      <category term="Ubuntu" scheme="https://xhinliang.win/tags/Ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>那些年，我们一起改过的配置文件 -- 常见配置文件类型简介</title>
    <link href="https://xhinliang.win/2018/11/computer/frequent-series/frequent-conf-intro/"/>
    <id>https://xhinliang.win/2018/11/computer/frequent-series/frequent-conf-intro/</id>
    <published>2018-11-25T00:00:00.000Z</published>
    <updated>2024-04-24T15:04:19.906Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h1><p><img src="/uploads/persister-frequent-conf-intro-overview-maxresdefault.jpg" alt="overview"></p><p>在程序员日常开发中，配置文件是一个非常常见的需求。</p><p>配置文件可以定制程序的逻辑，一段代码生成的程序可以灵活地适应多个需求。<br>几乎所有的程序都需要或者隐形需要配置文件，因为它们需要根据配置文件来决定在代码中使用怎样的逻辑来运行。</p><p>对于大部分的程序来说，他们需要的配置文件常常是一个 K-V 类型的结构，可以理解为一个 Key 为字符串， Value 也为字符串的一个 Map。字符串可以被转化成大部分通用的数据结构，只需要程序自己做好解析就可以了。</p><p>但随着程序的复杂度的增加，配置文件用纯字符串 K-V 来表示的局限性就越来越明显。<br>例如，我们如果需要一个 List，我们可以自定义分隔符。但如果一个 List 里我需要嵌套，那么用纯字符串 K-V 来表示就非常吃力了。</p><p>计算机编程的本质是抽象。因为配置文件是可以被抽象出来的，所以，各个程序员根据自己对配置文件的理解，定义了不同的对配置文件的抽象，这就是我们今天看到的五花八门的配置文件类型。</p><p>今天我就来侃侃常见的几种配置文件类型。</p><h1 id="Body"><a href="#Body" class="headerlink" title="Body"></a>Body</h1><h2 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h2><p>毫无疑问，JSON 是目前使用最广泛的一个数据交换格式。大量的 Web 前后端交互使用 JSON 作为数据载体，同时也触发了 JSON 在数据传输之外的用途 – 配置文件。</p><p>我们用一个 empty 的 npm project 的配置文件作为例子：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"dev_2018_11"</span>,</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line">  <span class="attr">"description"</span>: <span class="string">""</span>,</span><br><span class="line">  <span class="attr">"main"</span>: <span class="string">"index.js"</span>,</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"test"</span>: <span class="string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"author"</span>: <span class="string">""</span>,</span><br><span class="line">  <span class="attr">"license"</span>: <span class="string">"ISC"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>JSON 是 JavaScript 的亲儿子，所以在 JavaScript 相关的世界中被广泛用作配置文件。<br>例如：</p><ul><li>npm 依赖描述文件是 JSON</li><li>PHP composer 的依赖描述文件是 JSON</li><li>大量的 npm 第三方包的配置文件是 JSON</li></ul><p>优点：</p><ul><li>抽象程度高。JSON 能表示大部分的数据结构，对于嵌套的 List，Map 等需求，也能支持得非常好</li><li>通用性好。绝大部分的编程语言都内置了 JSON 解析器，所以 JSON 的通用性也非常好</li><li>合法性校验方便，有现成的 JSON-Schema 校验工具</li></ul><p>缺点：</p><ul><li>可读性较差。<ul><li>JSON 不支持注释，一些复杂配置的可读性非常差</li><li>灵活性欠佳</li><li>不支持嵌套配置文件（不能在一个配置文件中 import 另外一个配置文件）</li><li>JSON 严格的格式校验（Array 的最后一个元素后面不能加逗号），导致修改起来不够方便</li><li>Key 必须被双引号包裹，编写起来也不太方便</li></ul></li></ul><h2 id="JSON5"><a href="#JSON5" class="headerlink" title="JSON5"></a>JSON5</h2><p>JSON 的缺点非常致命，优点又非常明显，所以一些程序员希望在 JSON 的基础上新定义一个数据类型，对 JSON 扬长补短，这就是我们看到的 JSON5 结构。</p><p>举个官方的例子：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attribute">name</span>: <span class="string">'ManerFan'</span>,</span><br><span class="line">    // address</span><br><span class="line">    addr: <span class="string">'KunMing Road,\</span></span><br><span class="line"><span class="string">        ShannXi,\</span></span><br><span class="line"><span class="string">        China'</span>,</span><br><span class="line">    nickname: <span class="string">'\u5c0f\u5e08\u59b9'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>JSON5 完全兼容 JSON，而且对 JSON 做了一些扩展：</p><ul><li>支持注释</li><li>属性key可以不使用引号包含，而且可以使用单引号包含</li><li>可以在尾部有多余逗号</li><li>支持多行字符串</li><li>etc..</li></ul><p>JSON5 解决了 JSON 大部分的问题，但是依然不支持嵌套的配置文件。</p><h2 id="XML"><a href="#XML" class="headerlink" title="XML"></a>XML</h2><p>XML 在 <code>Java</code> 和 <code>Spring</code> 中使用非常广泛，他能描述大部分的数据结构，但是缺点是太罗嗦了，罗嗦到我现在都不想贴示例出来。</p><p>好吧，还是随便贴一个：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.xhinliang<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>xcall<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>$&#123;project.artifactId&#125;<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure></p><p>我只想说，XML 的「罗嗦」这个缺点，成功地掩盖了它的其它缺点，因为已经罗嗦到不能忍了…</p><h2 id="INI"><a href="#INI" class="headerlink" title="INI"></a>INI</h2><p>INI 配置文件在一些 Windows 程序中用得比较多，它事实上是一种非常朴素的字符串 K-V 的配置文件。</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[section1]</span>  </span><br><span class="line"><span class="comment">; this is comment</span></span><br><span class="line"><span class="attr">key</span>=value</span><br><span class="line"><span class="attr">key2</span>=value2</span><br><span class="line"></span><br><span class="line"><span class="section">[section2]</span></span><br></pre></td></tr></table></figure><p>ini 配置文件现在用得不多了，优点也不多说了，几乎没有。<br>缺点也不多说，关键是注释长得很丑。</p><h2 id="Properties"><a href="#Properties" class="headerlink" title="Properties"></a>Properties</h2><p>Properties 跟 INI 类似，事实上是一个简单的字符串 K-V。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># comment</span><br><span class="line">db=xxxxxx</span><br></pre></td></tr></table></figure><p>特点也跟 INI 差不多吧，抽象描述能力有限。</p><h2 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h2><p>没错，PHP 也是一种配置文件格式，在 80% 的网站 PHP 覆盖率面前颤抖吧！<br>PHP 的数组（array）即能表示普通的数组，也能表示Map，甚至能同时包含（这个特性能逼疯很多人…）</p><p>在 PHP 程序中， <code>config.php</code> 文件非常常见，事实上，大部分的 PHP 框架都使用 PHP 文件作为他们的配置文件。<br>举个 Yii 框架的配置文件作为例子：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">$config= [</span><br><span class="line">    <span class="string">'components'</span> =&gt; [</span><br><span class="line">        <span class="string">'db'</span> =&gt; [</span><br><span class="line">            <span class="string">'class'</span> =&gt; <span class="string">'yii\db\Connection'</span>,</span><br><span class="line">        ],</span><br><span class="line">        <span class="string">'mailer'</span> =&gt; [</span><br><span class="line">            <span class="string">'class'</span> =&gt; <span class="string">'yii\swiftmailer\Mailer'</span>,</span><br><span class="line">            <span class="string">'viewPath'</span> =&gt; <span class="string">'@common/mail'</span>,</span><br><span class="line">            <span class="comment">// send all mails to a file by default. </span></span><br><span class="line">            <span class="string">'useFileTransport'</span> =&gt; <span class="keyword">true</span>,</span><br><span class="line">        ],</span><br><span class="line">    ],</span><br><span class="line">];</span><br><span class="line"><span class="keyword">if</span> (YII_ENV_DEV) &#123;</span><br><span class="line">    <span class="comment">// configuration adjustments for 'dev' environment</span></span><br><span class="line">    $config[<span class="string">'bootstrap'</span>][] = <span class="string">'debug'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>PHP 文件作为配置文件，有以下优点：</p><ul><li>灵活性非常好，能更灵活地定制程序的逻辑，因为你能在 PHP 文件里干任何事情，在一个配置文件中 require 另外一个配置文件，是一个非常常见，非常 easy 的事情</li><li>抽象性非常棒，几乎没有用 PHP 配置文件描述不出来的数据结构</li></ul><p>但缺点也很明显：</p><ul><li>跨语言通用性几乎为 0</li><li>太过灵活导致安全性欠佳（你见过 import 之后会删除本地文件的配置文件吗…）</li></ul><h2 id="YAML"><a href="#YAML" class="headerlink" title="YAML"></a>YAML</h2><p>YAML 不是一种标记语言。他是一种数据描述语言（DDL）。有一些程序支持使用 YAML 作为配置文件，例如 <code>Spring Boot</code> 和 <code>Hexo</code>，<code>Ruby on Rails</code>。</p><p>典型的 YAML 配置格式如下：<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">house:</span></span><br><span class="line">  <span class="attr">family:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">Doe</span></span><br><span class="line">    <span class="attr">parents:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">John</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">Jane</span></span><br><span class="line">    <span class="attr">children:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">Paul</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">Mark</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">Simone</span></span><br><span class="line">  <span class="attr">address:</span></span><br><span class="line">    <span class="attr">number:</span> <span class="number">34</span></span><br><span class="line">    <span class="attr">street:</span> <span class="string">Main</span> <span class="string">Street</span></span><br><span class="line">    <span class="attr">city:</span> <span class="string">Nowheretown</span></span><br><span class="line">    <span class="attr">zipcode:</span> <span class="number">12345</span></span><br></pre></td></tr></table></figure></p><p>可以看到 YAML 的可读性和易修改性都非常好，目前大部分语言都直接支持了。</p><h2 id="Toml"><a href="#Toml" class="headerlink" title="Toml"></a>Toml</h2><p>TOML 是前 GitHub CEO 于2013年创建的语言，其目标是成为一个小规模的易于使用的语义化配置文件格式。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这是一个TOML文件</span></span><br><span class="line"></span><br><span class="line"><span class="attr">title</span> = <span class="string">"TOML Example"</span></span><br><span class="line"></span><br><span class="line"><span class="section">[owner]</span></span><br><span class="line"><span class="attr">name</span> = <span class="string">"Lance Uppercut"</span></span><br><span class="line"><span class="attr">dob</span> = <span class="number">1979</span>-<span class="number">05</span>-<span class="number">27</span>T07:<span class="number">32</span>:<span class="number">00</span>-<span class="number">08</span>:<span class="number">00</span> <span class="comment"># 日期是一等公民</span></span><br><span class="line"></span><br><span class="line"><span class="section">[database]</span></span><br><span class="line"><span class="attr">server</span> = <span class="string">"192.168.1.1"</span></span><br><span class="line"><span class="attr">ports</span> = [ <span class="number">8001</span>, <span class="number">8001</span>, <span class="number">8002</span> ]</span><br><span class="line"><span class="attr">connection_max</span> = <span class="number">5000</span></span><br><span class="line"><span class="attr">enabled</span> = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="section">[servers]</span></span><br><span class="line">  <span class="comment"># 可以使用空格、制表符进行缩进，或者根本不缩进。TOML不关心缩进。</span></span><br><span class="line">  <span class="section">[servers.alpha]</span></span><br><span class="line">  ip = "10.0.0.1"</span><br><span class="line">  dc = "eqdc10"</span><br></pre></td></tr></table></figure><p>乍看和 INI 差不多，但事实上扩展性比 INI 强多了，基本上能完整描述大部分的数据结构了。</p><h2 id="自定义-Conf-配置文件"><a href="#自定义-Conf-配置文件" class="headerlink" title="自定义 Conf 配置文件"></a>自定义 Conf 配置文件</h2><p>有一些程序会自己定义配置文件格式，例如 <code>Redis</code> <code>Nginx</code> <code>Supervisor</code>。<br>举个 Nginx 的配置文件作为例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">user  www www;</span><br><span class="line">worker_processes  2;</span><br><span class="line">error_log  logs/error.log;</span><br><span class="line">#error_log  logs/error.log  notice;</span><br><span class="line">#error_log  logs/error.log  info;</span><br><span class="line">pid        logs/nginx.pid;</span><br><span class="line">events &#123;</span><br><span class="line">    use epoll;</span><br><span class="line">    worker_connections  2048;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自定义配置文件一般来说基本不需要跨语言访问了（甚至同语言也不需要访问，只需要他自己一个程序访问就够了）<br>Nginx 自定义的配置文件可读性应该比用 JSON 描述会高很多，但合法性的校验目前没有太多的标准。</p><h1 id="PostView"><a href="#PostView" class="headerlink" title="PostView"></a>PostView</h1><p>配置文件的发展和变革，事实上也是编程语言的发展和变革，我们知道，在计算机领域通常「没有银弹」。但事实上有一些更优秀的配置文件格式正在渐渐替代老旧的格式。</p><p>但目前来看，并不存在一种配置文件格式能通杀所有的需求。所以，长期来看，还是会出现多种配置文件并存的现象的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Overview&quot;&gt;&lt;a href=&quot;#Overview&quot; class=&quot;headerlink&quot; title=&quot;Overview&quot;&gt;&lt;/a&gt;Overview&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/uploads/persister-frequent-conf-int
      
    
    </summary>
    
      <category term="Computer" scheme="https://xhinliang.win/categories/Computer/"/>
    
    
      <category term="Computer" scheme="https://xhinliang.win/tags/Computer/"/>
    
  </entry>
  
  <entry>
    <title>常见数据库简介</title>
    <link href="https://xhinliang.win/2018/11/computer/frequent-series/frequent-db-intro/"/>
    <id>https://xhinliang.win/2018/11/computer/frequent-series/frequent-db-intro/</id>
    <published>2018-11-18T00:00:00.000Z</published>
    <updated>2024-04-24T15:04:19.906Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h1><p><img src="/uploads/persister-frequent-db-intro-overview-548706-637199619492944531-16x9.jpg" alt="overview"></p><p>数据库在后端程序员中应该是最常使用到的中间件了，今天我们来侃一侃常见的数据库。</p><h2 id="MySQL-派系"><a href="#MySQL-派系" class="headerlink" title="MySQL 派系"></a>MySQL 派系</h2><p>MySQL 无疑是世界上最火热的数据库了。因为太过火热，它也有很多不同的分支，这些分支会有一些不同的特点。</p><h3 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h3><p>在国内来说，MySQL 是一个最常见的数据库了，也是 MySQL 派系中最主流的分支，目前由 Oracle 公司维护。</p><p>特点：</p><ol><li>源代码使用 C 和 C++ 编写，性能稳定。</li><li>支持多种数据库引擎（MyISAM，InnoDB，Memory，MyRocks etc..）可以满足不同场景下的需要。</li><li>InnoDB 支持事务，但 MyISAM 不支持。</li><li>索引使用 B+ 数实现，大部分操作都是顺序读取，对 HDD 友好。</li><li>MyISAM 中每个索引都是一级索引，但 InnoDB 中除主键外的索引都是二级索引（二级索引找到主键，主键再找到数据）。</li><li>分为社区版（免费）和商业版（收费）两种授权模式。</li><li>支持主从配置，主库读写，从库只读。</li></ol><h3 id="MariaDB"><a href="#MariaDB" class="headerlink" title="MariaDB"></a>MariaDB</h3><p>MariaDB 是 MySQL 的一个开源分支，其目标是对 MySQL 实现 100% 的兼容。<br>特点：</p><ol><li>她的存储引擎跟 MySQL 的不一致。</li><li>她独特的存储引擎叫 Maria，是 InnoDB 的变体，支持事务。除此之外还支持 FederatedX，XtraDB 等别的存储引擎。</li><li>跟 MySQL 100% 兼容：<ol><li>数据和表定义文件（.frm）是二进制兼容的</li><li>所有客户端 API、协议和结构都是完全一致的</li><li>所有文件名、二进制、路径、端口等都是一致的</li></ol></li><li>整体性能上跟 MySQL 类似。</li></ol><h3 id="TiDB"><a href="#TiDB" class="headerlink" title="TiDB"></a>TiDB</h3><p>TiDB 是 PingCAP 公司推出的一种开源分布式关系型数据库。<br>简介可以看看官网：<a href="https://pingcap.com/docs-cn/" target="_blank" rel="noopener">https://pingcap.com/docs-cn/</a></p><p>特点：</p><ul><li>基本兼容 MySQL 的协议。（不是 100% 兼容）</li><li>支持分布式事务。（这个牛逼了）</li><li>支持在线 DDL。</li><li>100% 支持标准的 ACID 事务。</li><li>不同于于 MySQL 主从复制方案，基于 Raft 的多数派选举协议可以提供金融级的 100% 数据强一致性保证，且在不丢失大多数副本的前提下，可以实现故障的自动恢复 (auto-failover)，无需人工介入。（这个牛逼了）</li><li>对大部分 OLAP 场景也提供支持。（OLAP：联机分析处理）</li></ul><h3 id="AliSQL"><a href="#AliSQL" class="headerlink" title="AliSQL"></a>AliSQL</h3><p>AliSQL 是另一个 MySQL 的分支版本，目前由 Alibaba 维护。<a href="https://github.com/alibaba/AliSQL" target="_blank" rel="noopener">GitHub</a></p><p>官方的描述是：「在通用基准测试场景下，AliSQL 版本比 MySQL 官方版本有着 70% 的性能提升；在秒杀场景下，性能提升 100 倍。」</p><p>特点：</p><ul><li>100% 兼容 MySQL。</li><li>又是另外一个存储引擎。</li><li>虽然是 Alibaba 在维护，但国内相关的资料极少。</li><li>开源轰轰烈烈，但源代码已经很久没有更新（估计是在内部有开发，对外开放的版本滞后了）</li></ul><h2 id="PostgreSQL"><a href="#PostgreSQL" class="headerlink" title="PostgreSQL"></a>PostgreSQL</h2><p>PostgreSQL 跟 MySQL 类似，也是一个关系型数据库，但他又多了一个特点，它是对象关系数据库管理系统(ORDBMS)。</p><p>提起 PostgreSQL，那就不得不拿他跟 MySQL 对比一下，<a href="https://blog.csdn.net/tiandao2009/article/details/79839037" target="_blank" rel="noopener">这里有简单的对比</a>。</p><p>特点：</p><ul><li>更学院派。这个是个哲学问题，不多说。</li><li>多进程架构。相比之下，MySQL 是多线程的。</li><li>支持同步，异步，半同步的 replica，是一种物理复制。</li><li>JOIN 性能比 MySQL 有很大优势。</li></ul><h2 id="MongoDB"><a href="#MongoDB" class="headerlink" title="MongoDB"></a>MongoDB</h2><p>MongoDB 不是一种关系型数据库。是一种 NoSQL。<br>特点：</p><ul><li>天生支持分布式，对扩展友好。</li><li>不支持事务 ACID，但作为替代，有个新的概念：BASE。    基本可用(Basically Available)，软状态/柔性事务(Soft state)，最终一致性 (Eventual consistency)。</li><li>在一些场景下可以基本替代 MySQL 使用。</li></ul><h2 id="HBase"><a href="#HBase" class="headerlink" title="HBase"></a>HBase</h2><p>HBase 是建立在 HDFS 之上的分布式面向列的数据库。是 Google 的著名论文《BigTable》的开源实现。</p><p><a href="https://blog.csdn.net/nosqlnotes/article/details/79647096" target="_blank" rel="noopener">这篇文章讲得不错</a>。</p><p>HBase 是一个面向列的数据库，在表中它由行排序。表模式定义只能列族，也就是键值对。一个表有多个列族以及每一个列族可以有任意数量的列。后续列的值连续地存储在磁盘上。表中的每个单元格值都具有时间戳。</p><p>HBase常被用来存放一些结构简单，但数据量非常大的数据。</p><p>特点：</p><ul><li>较大的表中能快速查找。</li><li>数十亿条记录低延迟访问单个行记录（随机存取）。</li><li>面向列的数据库。</li><li>不具有固定列模式的概念，仅定义列族，每个列族可以包含多个列。</li><li>大宽表，列值是稀疏的，而且是半结构化的数据。</li><li>不支持任何事务。</li><li>索引能力有限。</li><li>自动故障支持。</li></ul><h2 id="InfluxDB"><a href="#InfluxDB" class="headerlink" title="InfluxDB"></a>InfluxDB</h2><p>InfluxDB 是一个开源的时序数据库，使用 Golang开发，特别适合用于处理和分析资源监控数据这种时序相关数据。</p><p>InfluxDB 自带的各种特殊函数如求标准差，随机取样数据，统计数据变化比等，使数据统计和实时分析变得十分方便。</p><p>特点：</p><ul><li>数据可以被标记，允许非常灵活的查询。</li><li>支持一部分 SQL 语句。</li><li>适合 OLAP 或者监控需求。</li></ul><h2 id="OpenTSDB"><a href="#OpenTSDB" class="headerlink" title="OpenTSDB"></a>OpenTSDB</h2><p>也是一种时序数据库，但跟 InfluxDB 不同的是，他是依赖 HBase 实现的。</p><h2 id="GpDB-–-Greenplum"><a href="#GpDB-–-Greenplum" class="headerlink" title="GpDB – Greenplum"></a>GpDB – Greenplum</h2><p>Greenplum 数据库，也叫 GPDB，是一个分布式数据库，数据仓库快速查询工具。</p><p>特点：</p><ul><li>支持 SQL。</li><li>支持分布式事务。</li><li>支持线性扩展。</li></ul><h2 id="ClickHouse"><a href="#ClickHouse" class="headerlink" title="ClickHouse"></a>ClickHouse</h2><p>最近兴起的一个 OLAP 数据库，由俄罗斯公司 Yandex 开发，性能强劲。</p><h2 id="LevelDb"><a href="#LevelDb" class="headerlink" title="LevelDb"></a>LevelDb</h2><p>LevelDb 是一个 google 实现的非常高效的 KV 数据库，能够支持 billion 级别的数据量。 在这个数量级别下还有着非常高的性能，主要归功于它的良好的设计。特别是 LSM 算法。</p><h2 id="RocksDb"><a href="#RocksDb" class="headerlink" title="RocksDb"></a>RocksDb</h2><p>RocksDB 是使用 Facebook 基于 C++ 编写的嵌入式 KV 存储引擎，其键值均允许使用二进制流，提供向后兼容的 LevelDB API。</p><p>RocksDB 针对 Flash 存储进行优化，延迟极小。RocksDB使用 LSM 存储引擎，纯C++编写。Java 版本 RocksJava 正在开发中。</p><p>我理解 RocksDb 应该是 LevelDb 的另一种实现，从功能上算是超集吧。</p><h2 id="MyRocks"><a href="#MyRocks" class="headerlink" title="MyRocks"></a>MyRocks</h2><p>MySQL 兼容的 RocksDb，底层实现基本上跟 RocksDB 一致，但是作为一种存储引擎在 MySQL 中使用。国内有一些公司在使用。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Overview&quot;&gt;&lt;a href=&quot;#Overview&quot; class=&quot;headerlink&quot; title=&quot;Overview&quot;&gt;&lt;/a&gt;Overview&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/uploads/persister-frequent-db-intro
      
    
    </summary>
    
      <category term="Computer" scheme="https://xhinliang.win/categories/Computer/"/>
    
    
      <category term="Computer" scheme="https://xhinliang.win/tags/Computer/"/>
    
  </entry>
  
  <entry>
    <title>常用的文件系统简介</title>
    <link href="https://xhinliang.win/2018/11/computer/frequent-series/frequent-fs-intro/"/>
    <id>https://xhinliang.win/2018/11/computer/frequent-series/frequent-fs-intro/</id>
    <published>2018-11-10T00:57:29.000Z</published>
    <updated>2024-04-24T15:04:19.906Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h1><p><img src="/uploads/fs-intro-overview.jpg" alt="overview"></p><p>文件系统应该是计算机软件当中比较底层的部分，可能很多程序员都不会接触到。<br>今天简单地学习了一下，做下笔记。</p><h2 id="FAT-文件系统"><a href="#FAT-文件系统" class="headerlink" title="FAT 文件系统"></a>FAT 文件系统</h2><p>FAT 文件系统起源于二十世纪七十年代，当时用于 DOS 系统。当时的设计比较简单，后来由于存储媒介的发展渐渐有一些增强的版本出现。<br>所以现在主要包含这这几个版本：FAT8，FAT12，FAT16，FAT32。<br>这几个版本后面带的数字是啥意思呢？其实就是「簇」的编码地址所占用的宽度。例如，FAT12的意思是簇的编址采用12bit宽度的数，所以这种文件系统最多只能寻址 2 ** 12 = 4096 个簇。其他的 FAT 变种类似，就不赘述了。</p><p>这里注意一下，FAT 系统不是一种日志文件系统。至于「日志文件系统」，稍后会简单介绍一下。</p><h2 id="NTFS-文件系统"><a href="#NTFS-文件系统" class="headerlink" title="NTFS 文件系统"></a>NTFS 文件系统</h2><p>NTFS (New Technology File System) 是微软公司推出的一个用于大型存储媒介的<strong>日志</strong>文件系统。在 Windows 2000 左右的版本开始支持。<br>NTFS 技术上来说应该是比较先进的，具有以下特点：</p><ul><li>安全性高：NTFS支持基于文件或目录的ACL，并且支持加密文件系统（EFS）。 </li><li>可恢复性：NTFS支持基于原子事务概念的文件恢复，比较符合服务器文件系统的要求。 </li><li>文件压缩：NTFS支持基于文件或目录的文件压缩，可以很方便的节省磁盘空间。 </li><li>磁盘配额：NTFS支持磁盘配额，可针对系统中每个用户分配磁盘资源。</li></ul><h2 id="日志文件系统"><a href="#日志文件系统" class="headerlink" title="日志文件系统"></a>日志文件系统</h2><p>日志文件系统不是一种具体的文件系统。这里主要突出「日志」这两个字。<br>日志式文件系统起源于Oracle、Sybase等大型数据库。由于数据库操作往往是由多个相关的、相互依赖的子操作组成，任何一个子操作的失败都意味着整个操作的无效性，对数据库数据的任何修改都要恢复到操作以前的状态。Linux日志式文件系统就是由此发展而来的。日志文件系统通过增加一个叫做日志的、新的数据结构来解决这个“fsck”问题。这个日志是位于磁盘上的结构。在对元数据做任何改变以前，文件系统驱动程序会向日志中写入一个条目，这个条目描述了它将要做些什么，所以日志文件具有可伸缩性和健壮性。在分区中保存日志记录文件好处是：文件系统写操作首先是对记录文件进行操作，若整个写操作由于某种原因(如系统掉电)而中断，则在下次系统启动时就会读日志记录文件的内容，恢复到没有完成的写操作，这个过程一般只需要两三分钟时间。</p><p>我们可以看到，日志文件系统是大型数据库系统的基础。现在 Linux 上的文件系统基本上全是日志文件系统。</p><h2 id="Ext"><a href="#Ext" class="headerlink" title="Ext"></a>Ext</h2><p>ext是第一个专门为开发的Linux的文件系统类型，叫做扩展文件系统。它是1992年4月完成的，对Linux早期的发展产生了重要作用。但是，由于其在稳定性、速度和兼容性上存在许多缺陷，现在已经很少使用了。</p><p>Ext 不是一种日志文件系统，他不支持日志功能。</p><h2 id="Ext2"><a href="#Ext2" class="headerlink" title="Ext2"></a>Ext2</h2><p>ext2是为解决ext文件系统的缺陷而设计的可扩展的、高性能的文件系统，它又被称为二级扩展文件系统。ext2是1993年发布的，设计者是Rey Card。它是Linux文件系统类型中使用最多的格式，并且在速度和CPU利用率上较为突出，是GNU/Linux系统中标准的文件系统。它存取文件的性能极好，对于中、小型的文件更显示出优势，这主要得益于其簇快取层的优良设计。ext2可以支持256字节的长文件名，其单一文件大小和文件系统本身的容量上限与文件系统本身的簇大小有关。在常见的Intel x86兼容处理器的系统中，簇最大为4KB，单一文件大小上限为2048GB, 而文件系统的容量上限为6384GB。尽管Linux可以支持种类繁多的文件系统，但是2000年以前几乎所有的Linux发行版都使用ext2作为默认的文件系统。　</p><p>ext2也有一些问题。由于它的设计者主要考虑的是文件系统性能方面的问题，而在写入文件内容的同时，并没有写入文件的meta- data（和文件有关的信息，例如权限、所有者及创建和访问时间）。换句话说，Linux先写入文件的内容，然后等到有空的时候才写入文件的meta- data。如果出现写入文件内容之后，但在写入文件的meta-data之前系统突然断电，就可能造成文件系统就会处于不一致的状态。在一个有大量文件操作的系统中，出现这种情况会导致很严重的后果。另外，由于目前Linux的 2.4内核所能使用的单一分割区最大只有2048GB，尽管文件系统的容量上限为6384G，但是实际上能使用的文件系统容量最多也只有2048GB。</p><p>Ext2 也不是一种日志文件系统，他也不支持日志功能。</p><h2 id="Ext3"><a href="#Ext3" class="headerlink" title="Ext3"></a>Ext3</h2><p>ext3是由开放资源社区开发的日志文件系统，早期主要开发人员是Stephen Tweedie。ext3被设计成是ext2的升级版本，尽可能方便用户从ext2向ext3迁移。ext3在ext2的基础上加入了记录元数据的日志功能，努力保持向前和向后的兼容性，也就是在保有目前ext2的格式之下再加上日志功能。和ext2相比，ext3提供了更佳的安全性，这就是数据日志和元数据日志之间的不同。ext3是一种日志式文件系统，日志式文件系统的优越性在于由于文件系统都有快取层参与运作，如不使用时必须将文件系统卸下，以便将快取层的资料写回磁盘中。因此，每当系统要关机时，必须将其所有的文件系统全部卸下后才能进行关机。如果在文件系统尚未卸下前就关机 (如停电)，那么重开机后就会造成文件系统的资料不一致，故这时必须做文件系统的重整工作，将不一致与错误的地方修复。然而，这个过程是相当耗时的，特别是容量大的文件系统不能百分之百保证所有的资料都不会流失，特别在大型的服务器上可能会出现问题。除了与ext2兼容之外，ext3还通过共享ext2的元数据格式继承了ext2的其它优点。比如，ext3用户可以使用一个稳固的fsck工具。由于ext3基于ext2的代码，所以它的磁盘格式和ext2 的相同，这意味着一个干净卸装的ext3文件系统可以作为ext2文件系统毫无问题地重新挂装。如果现在使用的是ext2文件系统，并且对数据安全性要求很高，这里建议考虑升级使用ext3。</p><h2 id="Ext4"><a href="#Ext4" class="headerlink" title="Ext4"></a>Ext4</h2><p>第四扩展日志文件系统（fourth extended journaling file system，ext4fs）是由 ext3fs 演化而来。Ext4 文件系统被设计为具有向前和向后兼容性，但它具有许多新的高级特性（其中的一些特性破坏了兼容性）。这就意味着您可以将 ext4fs 的一部分作为 ext3fs 挂载，反之亦然。</p><p>首先，ext4fs 是 64 位文件系统，并被设计为可以支持很大的容量（1 exabyte）。它还可以使用分区，但是这样做将失去与 ext3fs 的兼容性。像 XFS 和 Reiser4 一样，ext4fs 还支持在必要时采取延时分配方式分配块（这样可以减少磁盘碎片）。日志的内容也已经执行过检查和（checksum），使日志更加可靠。ext4fs 并没有采用标准的 B+ 或者 B* 树，取而代之的是 B 树的一种变体，叫做 H 树，它支持更大的子目录（ext3 的上限为 32KB ）。</p><p>虽然延时分配的方法可以减少磁盘碎片，但时间久了，一个大的文件系统可能会成为碎片。为解决这个问题，开发了在线磁盘碎片整理工具（e4defrag）。您可以使用这个工具来整理单个的文件或者整个文件系统。</p><p>ext3fs 与 ext4fs 间的另一个有趣的区别就在于文件的日期分辨率。在 ext3 中，时间戳的最小分辨率为 1 秒。而 Ext4fs 是面向未来的：那时处理器和接口的速度会持续加快，需要更高的分辨率。因此，ext4 中时间戳的最小分辨率为 1 纳秒。</p><p>Ext4 已经在 Linux 2.6 以后的版本中应用非常广泛了。</p><h2 id="ZFS"><a href="#ZFS" class="headerlink" title="ZFS"></a>ZFS</h2><p>ZFS 是一种比 Ext4 更先进的文件系统，是一种比日志文件系统更先进的「事务性文件系统」，起源于 Sun 公司的 Solaris 系统。主要有以下特点：</p><ul><li>引入「存储池」的概念，理论上没有存储容量限制。</li><li>支持写时拷贝。</li><li>支持事务性语义</li><li>支持校验和自我恢复</li><li>支持快照</li></ul><h2 id="HFS"><a href="#HFS" class="headerlink" title="HFS"></a>HFS</h2><p>分层文件系统（Hierarchical File System，HFS）是一种由苹果计算机开发，并使用在 macOS 上的文件系统。最初被设计用于软盘和硬盘，同时也可以在在只读媒体如CD-ROM上见到。</p><h2 id="HFS-1"><a href="#HFS-1" class="headerlink" title="HFS+"></a>HFS+</h2><p>HFS+是一个HFS的改进版本，支持更大的文件，并用Unicode来命名文件或文件夹，代替了Mac OS Roman或其他一些字符集。和HFS一样，HFS+也使用B树来存储大部分分卷元数据。<br>尽管 HFS+ 比现有的先进文件系统（NTFS，ZFS）落后许多，但现在的 macOS 依然使用 HFS+。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Overview&quot;&gt;&lt;a href=&quot;#Overview&quot; class=&quot;headerlink&quot; title=&quot;Overview&quot;&gt;&lt;/a&gt;Overview&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/uploads/fs-intro-overview.jpg&quot; alt=
      
    
    </summary>
    
      <category term="Computer" scheme="https://xhinliang.win/categories/Computer/"/>
    
    
      <category term="Linux" scheme="https://xhinliang.win/tags/Linux/"/>
    
      <category term="macOS" scheme="https://xhinliang.win/tags/macOS/"/>
    
      <category term="FileSystem" scheme="https://xhinliang.win/tags/FileSystem/"/>
    
  </entry>
  
  <entry>
    <title>多级缓存的设计与实现</title>
    <link href="https://xhinliang.win/2018/10/backend/multi-level-cache/"/>
    <id>https://xhinliang.win/2018/10/backend/multi-level-cache/</id>
    <published>2018-10-30T01:43:29.000Z</published>
    <updated>2024-04-24T15:04:19.906Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Overview-总览"><a href="#Overview-总览" class="headerlink" title="Overview 总览"></a>Overview 总览</h2><p>在高并发量的后端业务中，多级缓存是一个非常常见的设计。<br>事实上，多级缓存策略在计算机硬件也是普遍存在的。</p><p><img src="/uploads/persister-multi-level-cache-overview-cache-memory-4113.jpg" alt="overview"></p><p>为什么会有多级缓存？<br>通常缓存都是比原数据要小的，设立缓存的目的很简单：某些数据经常用到，我们不想每次都去最深的地方（这里一般是指数据库）去找，所以我们就在更方便取到数据的地方把这些数据保存起来。</p><p>那么，为什么要用多级缓存呢？<br>对于所有的数据来说，并不是每一份数据使用的频率都一样。对于使用频率非常高的数据，我们称为热点数据。<br>例如，某个大V发了一条微博，告诉大家，他结婚了，那么这一条微博就是一个热点数据，热到不行的数据，我们的服务器平均下来每一毫秒要访问这条数据一万次（不夸张。。）<br>我前一篇文章也说了，分布式缓存 100us 的读取已经是正常成绩了，但是这个成绩完全不够支撑啊。我们必须有更快的缓存来保存这条数据，以减轻分布式缓存的压力。</p><p>对于我们业务开发者来说，显式使用 CPU 的 L1，L2，L3 显然是不现实的。那么，我们只能指望着静静插在主板上的内存条了。</p><p>现在的内存性能已经非常牛逼了，10000 mb/s 的读取速度已经非常普遍，至于延迟我还没有太多的概念。<br>内存那么牛逼，我们就要尽量利用好它，所以内存一般是我们多级缓存的最顶一层。</p><p>那么在这篇文章中，我就尝试着用 Java 来实现一下多级缓存。</p><p>各个语言都大同小异的，我这一年里基本都是写 Java 了，所以就直接用 Java 来写了。</p><h2 id="Preconditions-预设计"><a href="#Preconditions-预设计" class="headerlink" title="Preconditions 预设计"></a>Preconditions 预设计</h2><p>对于一个合格的后端服务来说，多级缓存的设计至少要包括以下几个功能：</p><ul><li>支持过期清理</li><li>支持容量限制及逐出策略</li><li>支持回源及回写机制（后面我会说下回源和回写这两个概念）</li></ul><h3 id="Back-to-Source-回源"><a href="#Back-to-Source-回源" class="headerlink" title="Back-to-Source 回源"></a>Back-to-Source 回源</h3><p>一般我们说回源一般是指 CDN 层面上的回源，意思是在这个 CDN 节点上没找到相关的资源，就去到「源站」上去获取这个资源。<br>回到我们的缓存设计中，在缓存层面上，回源也是类似的意思：在这一层的缓存中没找到这个数据，就到下一个「数据源」去获取资源。</p><h3 id="Write-Back-回写"><a href="#Write-Back-回写" class="headerlink" title="Write-Back 回写"></a>Write-Back 回写</h3><p>回写依托在回源的基础上。<br>当某一层的缓存没找到这个资源时，到下一层去找，发现找到了，然后这一层的缓存就把这个数据缓存起来。<br>到下一次再取这个数据的时候，就能马上取到了。</p><h2 id="Code-搞起"><a href="#Code-搞起" class="headerlink" title="Code 搞起"></a>Code 搞起</h2><p>简单写了下，轻喷 <a href="https://github.com/XhinLiang/multi-level-cache" target="_blank" rel="noopener">https://github.com/XhinLiang/multi-level-cache</a>。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Overview-总览&quot;&gt;&lt;a href=&quot;#Overview-总览&quot; class=&quot;headerlink&quot; title=&quot;Overview 总览&quot;&gt;&lt;/a&gt;Overview 总览&lt;/h2&gt;&lt;p&gt;在高并发量的后端业务中，多级缓存是一个非常常见的设计。&lt;br&gt;事实上
      
    
    </summary>
    
      <category term="Backend" scheme="https://xhinliang.win/categories/Backend/"/>
    
    
      <category term="Java" scheme="https://xhinliang.win/tags/Java/"/>
    
      <category term="Backend" scheme="https://xhinliang.win/tags/Backend/"/>
    
      <category term="Concurrent" scheme="https://xhinliang.win/tags/Concurrent/"/>
    
  </entry>
  
  <entry>
    <title>为什么不建议在 Redis 使用大 Key</title>
    <link href="https://xhinliang.win/2018/10/backend/big-key-in-redis/"/>
    <id>https://xhinliang.win/2018/10/backend/big-key-in-redis/</id>
    <published>2018-10-30T00:00:00.000Z</published>
    <updated>2024-04-24T15:04:19.906Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Preview"><a href="#Preview" class="headerlink" title="Preview"></a>Preview</h2><p><img src="/uploads/persister-big-key-in-redis-overview-Redis.png" alt="overview"></p><p>公司里某位工程师小斌发现在一个 Redis 集群中的 some_big_list 经常出现慢查询，而且 QPS 特别高。初步定位是出现了一个热点的 Key。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">newexplore&gt; llen some_big_list</span><br><span class="line">500000</span><br></pre></td></tr></table></figure></p><p>上面的命令发现，这个 some_big_list 是一个大 Key，导致 Redis Server 的服务器 CPU idle 很低，结果出现了慢查询。</p><p>当公司里富有经验的工程师磊哥介入调查的时候，发现这个 Redis Server 的所有响应在某一个时刻出现了 block。<br>磊哥是很牛逼的，怀疑是不是小斌在线上直接执行了 <code>del some_big_list</code> 操作。</p><p>结果当然是啦！</p><p>小斌 <code>del some_big_list</code> 的时候， Redis 的单线程模型只顾着删数据了（<code>del</code> 的时间复杂度是 O(N)），没有时间响应请求，直接导致出现一大堆请求超时。<br>而线上的 Redis 请求超时，又会让 Redis 的线程池打满，从而线上的 API Server 的 CPU 也会直接飙升。</p><p>不过还好，这个不是太大的 Key，这个业务也不是很核心的业务，所以没有造成什么影响。</p><h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><p>上面的例子告诉我们，Redis 大 Key 是一件很容易造成线上事故的事情，我们在业务上要尽量避免大 Key 的产生。<br>当不小心产生大 Key 的时候，我们也不能直接把整个 key 直接 del 掉，会影响其他的业务（不读取这个 key 的业务也会收到影响）。</p><p>那么，我们在出现 Redis 大 Key 的时候，应该怎么处理呢？</p><ul><li>业务层面，可以使用更小粒度的单位（时间单位或者地点单位，what ever），先换一个 keyPrefix。</li><li>换了 keyPrefix 之后，需要对老的 keyPrefix 作清理<ul><li>如果是 Redis 4.0 以后的版本，可以把 <code>del</code> 命令换成 <code>unlink</code> 命令，使用这个命令的时候，Redis 会另起一个线程进行删除，不会影响别的业务请求。其实也很好理解，既然把这个 key 删除了，那么也很容易搞定多线程不一致的问题了。</li><li>如果是更老的版本，可以设立一个准则：慢慢删…<ul><li>如果是 <code>list</code>，可以使用 <code>ltrim</code> 慢慢删</li><li>如果是 <code>zset</code>, 可以使用 <code>zremrangebyscore</code> 之类的命令慢慢删…</li><li>如果是 <code>hash</code> 或者 <code>set</code>，比较麻烦，请自己慢慢找合适的命令吧。。</li></ul></li></ul></li></ul><h2 id="Test"><a href="#Test" class="headerlink" title="Test"></a>Test</h2><p>好了，说了基础知识，我们来实地演练一下。</p><h3 id="Concept"><a href="#Concept" class="headerlink" title="Concept"></a>Concept</h3><p>首先说下我对分布式系统的 “响应时间” 的认知：</p><ul><li><code>t&lt;0.1ms</code>，非常快，没有优化的必要</li><li><code>0.1ms&lt;t&lt;1ms</code>，挺快的，基本不会对系统造成瓶颈</li><li><code>1ms&lt;t&lt;10ms</code>，凑活用，如果不是核心链路，基本 OK</li><li><code>10ms&lt;t&lt;100ms</code>，有点慢了，需要找时间优化</li><li><code>100ms&lt;t&lt;1000ms</code>，太慢了，赶紧查下原因吧！</li><li><code>t&gt;1000ms</code>，这他妈怎么用啊，下线算了</li></ul><p>注意这个是分布式系统的响应时间，而 Redis 作为一个最基础的缓存中间件，我认为对他的要求要更高一些（上述的响应时间 / 10 吧）</p><h3 id="Platform"><a href="#Platform" class="headerlink" title="Platform"></a>Platform</h3><p>这场测试在我自己的电脑上做，先来了解下我的爱机：</p><p>CPU：<a href="mailto:i5-3380m@3.6Ghz" target="_blank" rel="noopener">i5-3380m@3.6Ghz</a>，双核四线程<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">$ cat /proc/cpuinfo</span><br><span class="line">processor: 0</span><br><span class="line">vendor_id: GenuineIntel</span><br><span class="line">cpu family: 6</span><br><span class="line">model: 58</span><br><span class="line">model name: Intel(R) Core(TM) i5-3380M CPU @ 2.90GHz</span><br><span class="line">stepping: 9</span><br><span class="line">microcode: 0x20</span><br><span class="line">cpu MHz: 1272.714</span><br><span class="line">cache size: 3072 KB</span><br><span class="line">physical id: 0</span><br><span class="line">siblings: 4</span><br><span class="line">core id: 0</span><br><span class="line">cpu cores: 2</span><br><span class="line">apicid: 0</span><br><span class="line">initial apicid: 0</span><br><span class="line">fpu: yes</span><br><span class="line">fpu_exception: yes</span><br><span class="line">cpuid level: 13</span><br><span class="line">wp: yes</span><br><span class="line">flags: fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 cx16 xtpr pdcm pcid sse4_1 sse4_2 x2apic popcnt tsc_deadline_timer aes xsave avx f16c rdrand lahf_lm epb ssbd ibrs ibpb stibp kaiser tpr_shadow vnmi flexpriority ept vpid fsgsbase smep erms xsaveopt dtherm ida arat pln pts flush_l1d</span><br><span class="line">bugs: cpu_meltdown spectre_v1 spectre_v2 spec_store_bypass l1tf</span><br><span class="line">bogomips: 5780.76</span><br><span class="line">clflush size: 64</span><br><span class="line">cache_alignment: 64</span><br><span class="line">address sizes: 36 bits physical, 48 bits virtual</span><br><span class="line">power management:</span><br></pre></td></tr></table></figure></p><p>内存： 2×8G DDR3L 1600Mhz<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ free -m</span><br><span class="line">             total       used       free     shared    buffers     cached</span><br><span class="line">Mem:         15951      13847       2103        445       2331       6722</span><br><span class="line">-/+ buffers/cache:       4794      11156</span><br><span class="line">Swap:        15624          0      15624</span><br></pre></td></tr></table></figure></p><p>系统版本：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ cat /etc/os-release</span><br><span class="line">NAME=<span class="string">"Ubuntu"</span></span><br><span class="line">VERSION=<span class="string">"14.04.5 LTS, Trusty Tahr"</span></span><br><span class="line">ID=ubuntu</span><br><span class="line">ID_LIKE=debian</span><br><span class="line">PRETTY_NAME=<span class="string">"Ubuntu 14.04.5 LTS"</span></span><br><span class="line">VERSION_ID=<span class="string">"14.04"</span></span><br><span class="line">HOME_URL=<span class="string">"http://www.ubuntu.com/"</span></span><br><span class="line">SUPPORT_URL=<span class="string">"http://help.ubuntu.com/"</span></span><br><span class="line">BUG_REPORT_URL=<span class="string">"http://bugs.launchpad.net/ubuntu/"</span></span><br></pre></td></tr></table></figure></p><p>系统限制<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">ulimit</span> -a</span><br><span class="line">-t: cpu time (seconds)              unlimited</span><br><span class="line">-f: file size (blocks)              unlimited</span><br><span class="line">-d: data seg size (kbytes)          unlimited</span><br><span class="line">-s: stack size (kbytes)             8192</span><br><span class="line">-c: core file size (blocks)         0</span><br><span class="line">-m: resident <span class="built_in">set</span> size (kbytes)      unlimited</span><br><span class="line">-u: processes                       63332</span><br><span class="line">-n: file descriptors                65535</span><br><span class="line">-l: locked-in-memory size (kbytes)  64</span><br><span class="line">-v: address space (kbytes)          unlimited</span><br><span class="line">-x: file locks                      unlimited</span><br><span class="line">-i: pending signals                 63332</span><br><span class="line">-q: bytes <span class="keyword">in</span> POSIX msg queues       819200</span><br><span class="line">-e: max nice                        0</span><br><span class="line">-r: max rt priority                 0</span><br><span class="line">-N 15:                              unlimited</span><br></pre></td></tr></table></figure></p><p>硬盘：美光 M500,480G<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ dd <span class="keyword">if</span>=/dev/zero of=<span class="built_in">test</span> bs=64k count=512 oflag=dsync</span><br><span class="line">记录了512+0 的读入</span><br><span class="line">记录了512+0 的写出</span><br><span class="line">33554432字节(34 MB)已复制，5.16719 秒，6.5 MB/秒</span><br></pre></td></tr></table></figure></p><p>Redis版本：2.8，很老的版本了，连 Redis-Cluster 都不支持的版本<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ redis-server -v</span><br><span class="line">Redis server v=2.8.4 sha=00000000:0 malloc=jemalloc-3.4.1 bits=64 build=a44a05d76f06a5d9</span><br></pre></td></tr></table></figure></p><h3 id="Upgrade-Redis"><a href="#Upgrade-Redis" class="headerlink" title="Upgrade Redis"></a>Upgrade Redis</h3><p>非常尴尬，我的机器上的 Redis 居然是 2.8 这个上古世纪的版本，既然这样我就把它先删了吧（笑）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get remove redis-server</span><br></pre></td></tr></table></figure><p>一顿操作猛如虎，编译源代码走起！<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ wget http://download.redis.io/releases/redis-5.0.0.tar.gz</span><br><span class="line">$ tar xzf redis-5.0.0.tar.gz</span><br><span class="line">$ <span class="built_in">cd</span> redis-5.0.0</span><br><span class="line">$ make <span class="comment"># 编译走起</span></span><br><span class="line">$ make <span class="built_in">test</span> <span class="comment"># 编译完了跑个测试吧</span></span><br></pre></td></tr></table></figure></p><p>Redis 是很轻量的，按理说编译不会有什么坑，果然顺滑无比，编译加测试总共只花了三分钟。</p><p>那么现在来试下新版本的 Redis 吧！<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">$ src/redis-server -v</span><br><span class="line">Redis server v=5.0.0 sha=00000000:0 malloc=jemalloc-5.1.0 bits=64 build=792f3c7998732f3c</span><br><span class="line"></span><br><span class="line">$ src/redis-server</span><br><span class="line">21176:C 29 Oct 2018 00:24:32.717 <span class="comment"># oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo</span></span><br><span class="line">21176:C 29 Oct 2018 00:24:32.717 <span class="comment"># Redis version=5.0.0, bits=64, commit=00000000, modified=0, pid=21176, just started</span></span><br><span class="line">21176:C 29 Oct 2018 00:24:32.717 <span class="comment"># Warning: no config file specified, using the default config. In order to specify a config file use src/redis-server /path/to/redis.conf</span></span><br><span class="line">                _._                                                  </span><br><span class="line">           _.-``__ <span class="string">''</span>-._                                             </span><br><span class="line">      _.-``    `.  `_.  <span class="string">''</span>-._           Redis 5.0.0 (00000000/0) 64 bit</span><br><span class="line">  .-`` .-```.  ```\/    _.,_ <span class="string">''</span>-._                                   </span><br><span class="line"> (    <span class="string">'      ,       .-`  | `,    )     Running in standalone mode</span></span><br><span class="line"><span class="string"> |`-._`-...-` __...-.``-._|'</span>` _.-<span class="string">'|     Port: 6379</span></span><br><span class="line"><span class="string"> |    `-._   `._    /     _.-'</span>    |     PID: 21176</span><br><span class="line">  `-._    `-._  `-./  _.-<span class="string">'    _.-'</span>                                   </span><br><span class="line"> |`-._`-._    `-.__.-<span class="string">'    _.-'</span>_.-<span class="string">'|                                  </span></span><br><span class="line"><span class="string"> |    `-._`-._        _.-'</span>_.-<span class="string">'    |           http://redis.io        </span></span><br><span class="line"><span class="string">  `-._    `-._`-.__.-'</span>_.-<span class="string">'    _.-'</span>                                   </span><br><span class="line"> |`-._`-._    `-.__.-<span class="string">'    _.-'</span>_.-<span class="string">'|                                  </span></span><br><span class="line"><span class="string"> |    `-._`-._        _.-'</span>_.-<span class="string">'    |                                  </span></span><br><span class="line"><span class="string">  `-._    `-._`-.__.-'</span>_.-<span class="string">'    _.-'</span>                                   </span><br><span class="line">      `-._    `-.__.-<span class="string">'    _.-'</span>                                       </span><br><span class="line">          `-._        _.-<span class="string">'                                           </span></span><br><span class="line"><span class="string">              `-.__.-'</span>                                               </span><br><span class="line"></span><br><span class="line">21176:M 29 Oct 2018 00:24:32.720 <span class="comment"># WARNING: The TCP backlog setting of 511 cannot be enforced because /proc/sys/net/core/somaxconn is set to the lower value of 128.</span></span><br><span class="line">21176:M 29 Oct 2018 00:24:32.720 <span class="comment"># Server initialized</span></span><br><span class="line">21176:M 29 Oct 2018 00:24:32.720 <span class="comment"># WARNING overcommit_memory is set to 0! Background save may fail under low memory condition. To fix this issue add 'vm.overcommit_memory = 1' to /etc/sysctl.conf and then reboot or run the command 'sysctl vm.overcommit_memory=1' for this to take effect.</span></span><br><span class="line">21176:M 29 Oct 2018 00:24:32.720 <span class="comment"># WARNING you have Transparent Huge Pages (THP) support enabled in your kernel. This will create latency and memory usage issues with Redis. To fix this issue run the command 'echo never &gt; /sys/kernel/mm/transparent_hugepage/enabled' as root, and add it to your /etc/rc.local in order to retain the setting after a reboot. Redis must be restarted after THP is disabled.</span></span><br><span class="line">21176:M 29 Oct 2018 00:24:32.720 * DB loaded from disk: 0.000 seconds</span><br><span class="line">21176:M 29 Oct 2018 00:24:32.720 * Ready to accept connections</span><br></pre></td></tr></table></figure></p><p>Server 成功跑起来了，我们来开启另一个 Shell 窗口来启动 Client：<br><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ src/redis-cli</span><br><span class="line"><span class="number">127.0.0.1:6379</span>&gt;</span><br></pre></td></tr></table></figure></p><p>So Easy～<br>先看看现在 Redis 占用了多少内存吧<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ps aef -o <span class="built_in">command</span>,vsize,rss,%mem,size | grep redis-server </span><br><span class="line">src/redis-server *:6379  63004  5532  0.0 40964</span><br></pre></td></tr></table></figure></p><p>好吧，0%，先忽略。。</p><p>准备一个 lua 脚本，我们保存为 add-test-big-key.lua<br><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">local</span> bulk = <span class="number">1000</span></span><br><span class="line"><span class="keyword">local</span> fvs = &#123;&#125;</span><br><span class="line"><span class="keyword">local</span> j</span><br><span class="line"><span class="keyword">for</span> i = <span class="number">1</span>, ARGV[<span class="number">1</span>] <span class="keyword">do</span></span><br><span class="line">  j = i % bulk</span><br><span class="line">  <span class="keyword">if</span> j == <span class="number">0</span> <span class="keyword">then</span></span><br><span class="line">    fvs[<span class="number">2</span> * bulk - <span class="number">1</span>] = <span class="string">"field"</span> .. i</span><br><span class="line">    fvs[<span class="number">2</span> * bulk] = <span class="string">"value"</span> .. i</span><br><span class="line">    redis.call(<span class="string">"HMSET"</span>, KEYS[<span class="number">1</span>], <span class="built_in">unpack</span>(fvs))</span><br><span class="line">    fvs = &#123;&#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    fvs[<span class="number">2</span> * j - <span class="number">1</span>] = <span class="string">"field"</span> .. i</span><br><span class="line">    fvs[<span class="number">2</span> * j] = <span class="string">"value"</span> .. i</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">if</span> #fvs &gt; <span class="number">0</span> <span class="keyword">then</span></span><br><span class="line">  redis.call(<span class="string">"HMSET"</span>, KEYS[<span class="number">1</span>], <span class="built_in">unpack</span>(fvs))</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">"OK"</span></span><br></pre></td></tr></table></figure></p><p>此脚本参考 <a href="https://groups.google.com/d/msg/redis-db/0UzLhSkAziQ/H-35GJfqtisJ" target="_blank" rel="noopener">how to load lua script from file for redis</a></p><p>灌数据，然后看下内存占用<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ src/redis-cli --<span class="built_in">eval</span> add-test-big-key.lua big_hash1 , 1000000</span><br><span class="line"><span class="string">"OK"</span></span><br><span class="line">$ ps aef -o <span class="built_in">command</span>,vsize,rss,%mem,size | grep redis-server</span><br><span class="line">src/redis-server *:6379 134660 74044  0.4 112620</span><br></pre></td></tr></table></figure></p><p>可以看到虽然这个大Key里有100w条数据，但内存占用依然很低。<br>我们现在尝试把这个 key 删除，并查看 SLOWLOG。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; del big_hash1</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; SLOWLOG GET 2</span><br><span class="line">1) 1) (<span class="built_in">integer</span>) 2009</span><br><span class="line">   2) (<span class="built_in">integer</span>) 1540777173</span><br><span class="line">   3) (<span class="built_in">integer</span>) 373285</span><br><span class="line">   4) 1) <span class="string">"del"</span></span><br><span class="line">      2) <span class="string">"big_hash1"</span></span><br><span class="line">   5) <span class="string">"127.0.0.1:57110"</span></span><br><span class="line">   6) <span class="string">""</span></span><br><span class="line">2) 1) (<span class="built_in">integer</span>) 2008</span><br><span class="line">   2) (<span class="built_in">integer</span>) 1540777157</span><br><span class="line">   3) (<span class="built_in">integer</span>) 2325250</span><br><span class="line">   4) 1) <span class="string">"EVAL"</span></span><br><span class="line">      2) <span class="string">"local bulk = 1000\nlocal fvs = &#123;&#125;\nlocal j\nfor i = 1, ARGV[1] do\n  j = i % bulk\n  if j == 0 then\n    fvs[2 * bulk - 1] = \"field\" .... (254 more bytes)"</span></span><br><span class="line">      3) <span class="string">"1"</span></span><br><span class="line">      4) <span class="string">"big_hash1"</span></span><br><span class="line">      5) <span class="string">"1000000"</span></span><br><span class="line">   5) <span class="string">"127.0.0.1:57234"</span></span><br><span class="line">   6) <span class="string">""</span></span><br></pre></td></tr></table></figure><p>可以看到 del 操作持续了 373ms，在线上环境中，这个影响应该不算大。</p><p>我们把数据量增大 100 倍看下吧，预期 redis-server 会占用 40% 左右的内存（redis好像没有这方面的优化。。）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ src/redis-cli --<span class="built_in">eval</span> add-test-big-key.lua big_hash1 , 100000000 </span><br><span class="line"><span class="string">"OK"</span></span><br><span class="line">$ ps aef -o <span class="built_in">command</span>,vsize,rss,%mem,size | grep redis-server    </span><br><span class="line">src/redis-server *:6379 7804420 6656092 40.7 7782380</span><br></pre></td></tr></table></figure><p>果不其然。。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; del big_hash1</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">(62.95s)</span><br><span class="line">127.0.0.1:6379&gt; SLOWLOG GET 2</span><br><span class="line">1) 1) (<span class="built_in">integer</span>) 102012</span><br><span class="line">   2) (<span class="built_in">integer</span>) 1540777822</span><br><span class="line">   3) (<span class="built_in">integer</span>) 62952411</span><br><span class="line">   4) 1) <span class="string">"del"</span></span><br><span class="line">      2) <span class="string">"big_hash1"</span></span><br><span class="line">   5) <span class="string">"127.0.0.1:57110"</span></span><br><span class="line">   6) <span class="string">""</span></span><br><span class="line">2) 1) (<span class="built_in">integer</span>) 102011</span><br><span class="line">   2) (<span class="built_in">integer</span>) 1540777634</span><br><span class="line">   3) (<span class="built_in">integer</span>) 279820829</span><br><span class="line">   4) 1) <span class="string">"EVAL"</span></span><br><span class="line">      2) <span class="string">"local bulk = 1000\nlocal fvs = &#123;&#125;\nlocal j\nfor i = 1, ARGV[1] do\n  j = i % bulk\n  if j == 0 then\n    fvs[2 * bulk - 1] = \"field\" .... (254 more bytes)"</span></span><br><span class="line">      3) <span class="string">"1"</span></span><br><span class="line">      4) <span class="string">"big_hash1"</span></span><br><span class="line">      5) <span class="string">"100000000"</span></span><br><span class="line">   5) <span class="string">"127.0.0.1:57324"</span></span><br><span class="line">   6) <span class="string">""</span></span><br></pre></td></tr></table></figure><p>牛逼了，删这个 key 花了一分钟，在线上肯定爆炸了。。（其实灌数据的脚本花了更久，这个忽略吧。。）<br>这个数据量是 100m 条数据（简单数据），对于线上还是有参考意义的。</p><p>接下来我们是下 <code>unlink</code> 的性能</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ src/redis-cli --<span class="built_in">eval</span> add-test-big-key.lua big_hash3 , 100000000 &amp;</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; unlink big_hash2</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line"></span><br><span class="line">$ top</span><br><span class="line">  PID USER      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND                                                         </span><br><span class="line"> 3512 xhinlia+  20   0 7806468 6.349g   3720 S 102.9 40.8  11:24.49 redis-server</span><br></pre></td></tr></table></figure><p>可以看到， <code>unlink</code> 立刻就返回了，但是 redis-server 还是会消耗很多 CPU。</p><p>接下来我们看一下大 key 自然过期的时候会发生什么事情：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ src/redis-cli --<span class="built_in">eval</span> add-test-big-key.lua big_hash3 , 100000000 </span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; expire big_hash3 5</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> abc xxx EX 10</span><br><span class="line">（卡住了。。。）</span><br></pre></td></tr></table></figure></p><p>可以看到，自然过期的大 key 也出现了阻塞。</p><h2 id="Conclution"><a href="#Conclution" class="headerlink" title="Conclution"></a>Conclution</h2><p>总结一下：</p><ul><li>尽量从业务上避免 Redis 大 Key，无论从性能角度（hash成本）还是过期删除成本角度，都会比较高</li><li>尽量使用 <code>unlink</code> 代替 <code>del</code> 删除大 key</li><li>key 的自然过期和手动删除，都会阻塞 Redis</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Preview&quot;&gt;&lt;a href=&quot;#Preview&quot; class=&quot;headerlink&quot; title=&quot;Preview&quot;&gt;&lt;/a&gt;Preview&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/uploads/persister-big-key-in-redis-over
      
    
    </summary>
    
      <category term="Backend" scheme="https://xhinliang.win/categories/Backend/"/>
    
    
      <category term="Backend" scheme="https://xhinliang.win/tags/Backend/"/>
    
      <category term="Cache" scheme="https://xhinliang.win/tags/Cache/"/>
    
      <category term="Redis" scheme="https://xhinliang.win/tags/Redis/"/>
    
      <category term="Lua" scheme="https://xhinliang.win/tags/Lua/"/>
    
      <category term="DevOps" scheme="https://xhinliang.win/tags/DevOps/"/>
    
  </entry>
  
  <entry>
    <title>求一个数组的波峰</title>
    <link href="https://xhinliang.win/2018/03/algorithm/find-peak-in-array/"/>
    <id>https://xhinliang.win/2018/03/algorithm/find-peak-in-array/</id>
    <published>2018-03-27T23:36:29.000Z</published>
    <updated>2024-04-24T15:04:19.906Z</updated>
    
    <content type="html"><![CDATA[<p>三个月前被问到一个有趣的算法题，当时想了很久才想出来，现在写篇博客记录一下。</p><blockquote><p>给定一个很长的数组 arr，已知数组的长度 length 且 length &gt;= 3，已知数组的第一个元素不比第二个元素大，最后一个元素不比倒数第二个元素大。那么求这个数组中 <strong>任意一个</strong> 波峰的数组下标。PS：不比前一个元素小而且不比后一个元素小的元素称为波峰。</p></blockquote><p><code>arr[1] &gt;= arr[0]</code>，那么只需要 <code>arr[1] &gt;= arr[2]</code> 1 就是一个波峰了。</p><p>如果 <code>arr[1] &lt; arr[2]</code> ，那么只需要 <code>arr[2] &gt;= arr[3]</code> 2就是一个波峰了。</p><p>……</p><p>这个其实可以抽象成一个动态规划的问题。但没必要而且很明显抽象之后还是得遍历…</p><p>等等…如果除去第一个元素和最后一个元素的数组是一个有序递增的数组怎么办，这种情况下我们需要扫遍整个数组，从而付出 O(N) 的复杂度。有没有觉得这个有点像连环诈骗，指针每次移动到的元素都满足波峰的前一部分条件（不比前一个元素小），我们满心欢喜地期待它满足下半部分的条件，但是有时候并不能如愿。</p><blockquote><p>有没有那么一瞬间想到二分搜索？</p></blockquote><p>确实，这个很像二分搜索可以解决的问题。但是 <em>数组并没有说自己有序啊</em>。所以根本不满足二分搜索的基本条件。</p><blockquote><p>死马当活马医看下？</p></blockquote><p>好吧，那么我们试一下。我们在数组的正中间取一个元素，我们称为 <code>arr[length/2]</code>。<br>取到之后，我们是不是应该满怀希望地迫不及待地将它和它的左右两个元素进行比较呢？因为这个比较发生在数组上，所以开销可以忽略不计。<br>如果它比左右都大，那很明显它就是一个波峰，那这个时候返回它的下标 <code>length/2</code> 就可以了。<br>那如果它比左边的小或者比右边的小，或者比左右都小呢？<br>那么波峰是不是可以在左边或者右边找一找，如何确定左边或者右边一定有波峰呢？</p><p>这个时候，我们应该注意到两个问题。</p><ol><li>如果它比左边的小，那么 <code>arr[:length/2+1]</code> 这个子数组也是一个符合题设条件数组。如果它比右边的小，那么 <code>arr[length/2:]</code> 这个子数组也是一个符合题设条件数组。</li><li>在左边找或者在右边找一定能找到一个波峰吗？换句话说，符合提设条件的数组是否一定存在至少一个波峰？</li></ol><p>如果注意到这两个问题，那么这道题就迎刃而解了。<br>给出实例代码（纯手写…）<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_peak</span><span class="params">(arr, length)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> length &lt; <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line"></span><br><span class="line">    middle = length / <span class="number">2</span></span><br><span class="line">    <span class="keyword">if</span> length &lt; <span class="number">4</span>:</span><br><span class="line">        <span class="keyword">return</span> middle </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> arr[middle] &gt; arr[middle - <span class="number">1</span>] <span class="keyword">and</span> arr[middle] &gt; arr[middle + <span class="number">1</span>]:</span><br><span class="line">        <span class="keyword">return</span> middle</span><br><span class="line">    <span class="keyword">if</span> arr[middle] &lt; arr[middle - <span class="number">1</span>]:</span><br><span class="line">        <span class="keyword">return</span> find_peak(arr[:middle + <span class="number">1</span>], middle + <span class="number">1</span>)</span><br><span class="line">    sub_length = middle + <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> length % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">        sub_length = middle</span><br><span class="line">    <span class="keyword">return</span> find_peak(arr[middle:], sub_length)</span><br></pre></td></tr></table></figure></p><p>这个代码实现需要考虑非常多的边界，也许我的代码还没考虑到，如果有问题，欢迎拍砖。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;三个月前被问到一个有趣的算法题，当时想了很久才想出来，现在写篇博客记录一下。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;给定一个很长的数组 arr，已知数组的长度 length 且 length &amp;gt;= 3，已知数组的第一个元素不比第二个元素大，最后一个元素不比倒数第二个
      
    
    </summary>
    
      <category term="Algorithm" scheme="https://xhinliang.win/categories/Algorithm/"/>
    
    
      <category term="Algorithm" scheme="https://xhinliang.win/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>Java 里的构造函数需要加锁吗</title>
    <link href="https://xhinliang.win/2018/02/backend/constructor-with-sychronized/"/>
    <id>https://xhinliang.win/2018/02/backend/constructor-with-sychronized/</id>
    <published>2018-02-20T22:58:29.000Z</published>
    <updated>2024-04-24T15:04:19.906Z</updated>
    
    <content type="html"><![CDATA[<p>我们在写 Java 的时候，经常会使用到 <code>synchronized</code> 关键字。<br><code>synchronized</code> 是一个相对重量级的锁，它有两种使用形式。</p><ol><li><p>对一个具体的变量加锁。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Logger l = LoggerFactory.getLogger(getClass().getName());</span><br><span class="line"><span class="keyword">synchronized</span> (l) &#123;</span><br><span class="line">    <span class="comment">// do something</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">    <span class="comment">// do something</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>修饰方法，可以是普通方法，也可以是静态方法。这事实上也是对 <code>this</code> 加锁。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 普通方法</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// something</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 上面等效</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doNothing</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">        <span class="comment">// do something</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">doSomethingStatic</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// something</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p><code>synchronized</code> 非常常见，但是大家有没有见过在构造函数里用 <code>synchronized</code> 修饰的呢？</p><p>事实上，如果在构造函数里加上 <code>synchronized</code> 修饰符，你的编译会失败。<br>聪明的编译器会告诉你 <strong>此处不允许使用修饰符synchroniz</strong></p><p>明确一点，如果在构造函数里使用 <code>synchronized</code> 修饰符的话，事实上是对 <code>this</code> 加锁。<br>但是为什么这个地方不允许使用 <code>synchronized</code> 修饰符呢？</p><p>我认为有两个原因：</p><ol><li>在构造函数中，<code>this</code> 事实上没有完全构造好，此时不能用作锁。</li><li>构造函数中， <code>this</code> 还没有被传递出去，事实上不存在并发问题。</li></ol><p>第一个原因大家都能懂，第二个可能要好好说下：<br>在 Java 的并发模型里，最重要的就是变量的可见性。<br>多个线程同时对一个对象调用其某个方法，那么这个时候就有可能出现并发问题。</p><p>那么，对一个对象进行 <code>new</code> 的时候，事实上不可能存在多个线程同时 <code>new</code> 同一个对象，那么也就是正常情况下，不存在对 <code>this</code> 的并发安全性问题，所以，在构造函数中，对 <code>this</code> 加锁，是完全没有意义的。</p><p>有个情况例外，如果你在构造函数中，提前把 <code>this</code> 暴露到某个地方，就有可能存在构造函数中也存在并发安全性问题。例如：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Object that;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 请不要这样做</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Server</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    that = <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这是个非常不好的习惯，我们在实际应用中应该尽量避免这样做。</p><p>有些朋友可能会问，那如果在构造函数中传递某个对象，会不会出现并发安全性问题。<br>答案当然是会。如果要规避这些问题，那么你在构造函数里，不应该是对 <code>this</code> 加锁，而是应该<strong>在构造函数中对所涉及到的有并发安全性问题的对象进行加锁</strong>，或者在构造函数之外对这个对象进行加锁（不常用）。</p><p>记住：构造函数本身是并发安全的，只是因为额外添加了不安全的参数，导致了构造函数的不安全。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;我们在写 Java 的时候，经常会使用到 &lt;code&gt;synchronized&lt;/code&gt; 关键字。&lt;br&gt;&lt;code&gt;synchronized&lt;/code&gt; 是一个相对重量级的锁，它有两种使用形式。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;对一个具体的变量加锁。&lt;/p&gt;
&lt;fi
      
    
    </summary>
    
      <category term="Backend" scheme="https://xhinliang.win/categories/Backend/"/>
    
    
      <category term="Java" scheme="https://xhinliang.win/tags/Java/"/>
    
      <category term="Backend" scheme="https://xhinliang.win/tags/Backend/"/>
    
  </entry>
  
  <entry>
    <title>Java 计数器的「线程安全」和「非线程安全」实现</title>
    <link href="https://xhinliang.win/2018/01/backend/counter-in-java/"/>
    <id>https://xhinliang.win/2018/01/backend/counter-in-java/</id>
    <published>2018-01-01T00:36:29.000Z</published>
    <updated>2024-04-24T15:04:19.906Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>计数器是一个很常见的需求，这里使用 Java 实现了计数器的线程安全和非线程安全版本</p></blockquote><h4 id="ICounter-接口"><a href="#ICounter-接口" class="headerlink" title="ICounter 接口"></a><code>ICounter</code> 接口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ICounter</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(E e)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">long</span> <span class="title">get</span><span class="params">(E e)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Counter-非线程安全版本"><a href="#Counter-非线程安全版本" class="headerlink" title="Counter 非线程安全版本"></a><code>Counter</code> 非线程安全版本</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Counter</span>&lt;<span class="title">E</span>&gt; <span class="keyword">implements</span> <span class="title">ICounter</span>&lt;<span class="title">E</span>&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;E, <span class="keyword">long</span>[]&gt; map;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Counter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span>[] mutableLong = map.get(e);</span><br><span class="line">        <span class="keyword">if</span> (mutableLong == <span class="keyword">null</span>) &#123;</span><br><span class="line">            map.put(e, <span class="keyword">new</span> <span class="keyword">long</span>[]&#123;<span class="number">1L</span>&#125;);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        mutableLong[<span class="number">0</span>] += <span class="number">1L</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">get</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span>[] mutableLong = map.get(e);</span><br><span class="line">        <span class="keyword">if</span> (mutableLong == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0L</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> mutableLong[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        ICounter&lt;String&gt; counter = <span class="keyword">new</span> Counter&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1</span>; ++i) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">1000000</span>; ++j) &#123;</span><br><span class="line">                    counter.add(<span class="string">"a"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(counter.get(<span class="string">"a"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="线程安全版本"><a href="#线程安全版本" class="headerlink" title="线程安全版本"></a>线程安全版本</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcurrentCounter</span>&lt;<span class="title">E</span>&gt; <span class="keyword">implements</span> <span class="title">ICounter</span>&lt;<span class="title">E</span>&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;E, AtomicLong&gt; map;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConcurrentCounter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.map = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">        AtomicLong atomicLong = map.putIfAbsent(e, <span class="keyword">new</span> AtomicLong(<span class="number">1L</span>));</span><br><span class="line">        <span class="keyword">if</span> (atomicLong != <span class="keyword">null</span>) &#123;</span><br><span class="line">            atomicLong.getAndAdd(<span class="number">1L</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">get</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">        AtomicLong atomicLong = map.get(e);</span><br><span class="line">        <span class="keyword">if</span> (atomicLong == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0L</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> atomicLong.get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        ConcurrentCounter&lt;String&gt; counter = <span class="keyword">new</span> ConcurrentCounter&lt;&gt;();</span><br><span class="line">        Thread[] threads = <span class="keyword">new</span> Thread[<span class="number">10000</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; ++i) &#123;</span><br><span class="line">            threads[i] = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">10000</span>; ++j) &#123;</span><br><span class="line">                    counter.add(<span class="string">"a"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            threads[i].start();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; ++i) &#123;</span><br><span class="line">            threads[i].join();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(counter.get(<span class="string">"a"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;计数器是一个很常见的需求，这里使用 Java 实现了计数器的线程安全和非线程安全版本&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;ICounter-接口&quot;&gt;&lt;a href=&quot;#ICounter-接口&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
      <category term="Backend" scheme="https://xhinliang.win/categories/Backend/"/>
    
    
      <category term="Java" scheme="https://xhinliang.win/tags/Java/"/>
    
      <category term="Backend" scheme="https://xhinliang.win/tags/Backend/"/>
    
  </entry>
  
  <entry>
    <title>双向链表和哈希表实现 LRUCache</title>
    <link href="https://xhinliang.win/2017/12/algorithm/lru-cache-in-python/"/>
    <id>https://xhinliang.win/2017/12/algorithm/lru-cache-in-python/</id>
    <published>2017-12-29T00:36:29.000Z</published>
    <updated>2024-04-24T15:04:19.906Z</updated>
    
    <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>LRUCache 是一个很常用的缓存实现，本文会首先介绍一下 LRUCache 的定义，然后尝试用 Python 实现它。</p><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>LRUCache 首先是一个 Cache，那么对于一个 Cache 而言，肯定需要提供 <code>get</code> 和 <code>set</code> 两个方法，而且，这两个方法的时间复杂度越低越好，最好达到 O(1) 级别。</p><p>LRU 是 Least Recently Used 的缩写，近期最少使用策略。<br>LRUCache 意味着一个带有容量的缓存，当缓存的容量已满而且需要插入新值的时候，缓存需要淘汰一个旧值。具体淘汰的策略就是 LRU。</p><p>LRU 意味着这样的功能：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如果 Cache 里有两个 key =&gt; `a` 和 `b`，而且 Cache 的容量是 2</span></span><br><span class="line">cache.get(<span class="string">'a'</span>)</span><br><span class="line"><span class="comment"># ... 无数次</span></span><br><span class="line">cache.get(<span class="string">'a'</span>)</span><br><span class="line">cache.get(<span class="string">'b'</span>)</span><br><span class="line">cache.put(<span class="string">'c'</span>, <span class="string">'c-value'</span>)</span><br><span class="line"><span class="comment"># cache =&gt; &#123;'b': 'b-value', 'c': 'c-value'&#125;</span></span><br></pre></td></tr></table></figure></p><p>我们可以看到，无论 <code>a</code> 之前 <code>get</code>，过多少次，只要最后一个 <code>get(&#39;b&#39;)</code> 的操作在最后一个 <code>get(&#39;a&#39;)</code> 的操作之后，那么 淘汰 <code>b</code> 的优先级肯定在 <code>a</code> 之后，这就是 LRU 策略的实例化解释。</p><h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><p>通常使用双向链表和字典来实现 LRUCache。</p><p>为了能很快找到双向链表的头和尾，我们需要一个虚拟头节点，这个头节点的 <code>next</code> 指针始终指向真实的头节点（以下称为头节点）；类似地，我们也需要一个虚拟尾节点，它的 pre 指针始终指向真实的尾节点（以下称为尾节点）。</p><p>双向链表的头节点就是淘汰优先级最低的点，尾节点就是淘汰优先级最高的点。<br>当 LRUCache 容量达到上限后，应该首先淘汰尾节点。</p><p>链表节点的 val 字段指向一个数组 [key, value]。这个 key 和 value 就是整个 LRUCache 中 <code>get</code> 和 <code>set</code> 方法的 key 和 value。</p><p>map 的 key 也是 LRUCache 的 key，但是 map 的 value 是双向链表的节点。</p><p>那么对应 LRUCache 的两个方法 <code>get</code> <code>put</code>，我们可以想出以下思路：</p><h5 id="get-key"><a href="#get-key" class="headerlink" title="get(key)"></a>get(key)</h5><p><code>get</code> 方法需要考虑两件事情：</p><ol><li>找到 key 对应的 value 值</li><li>更新 key 的淘汰优先级</li></ol><p>具体思路如下：</p><ul><li>如果这个 key 在 map 中不存在，那么我们只需返回 null 即可</li><li>如果这个 key 在 map 中存在，那么我们此时能马上获取到这个 key 对应的链表节点，通过链表节点我们能读取到真正的缓存的值。此时我们需要先将这个链表节点挪动到链表的头部，然后再返回链表的 value 字段</li></ul><h5 id="put-key-value"><a href="#put-key-value" class="headerlink" title="put(key, value)"></a>put(key, value)</h5><p><code>put</code> 方法需要考虑三个事情：</p><ol><li>更新 key 对应的 value</li><li>更新 key 对应的淘汰优先级</li><li>如果当前缓存容量达到上限，淘汰一个链表节点。</li></ol><p>具体思路如下：</p><ul><li>如果这个 key 原本就存在需要通过 map 找到链表节点，然后更新链表节点中的 value，然后将这个链表节点挪动到链表的头部</li><li>如果这个 key 存在，那么我们需要构造一个 node，并插入到链表头部<ul><li>如果容量未满，不用管</li><li>如果容量满了，那么我们需要移除链表尾部的 node，并将其从 map 中也移除</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListNode</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    LinkedListNode</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    __slots__ = [<span class="string">'val'</span>, <span class="string">'next'</span>, <span class="string">'pre'</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        self.val = x</span><br><span class="line">        self.next = <span class="literal">None</span></span><br><span class="line">        self.pre = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LinkedList</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    LinkedList</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    __slots__ = [<span class="string">'head'</span>, <span class="string">'tail'</span>, <span class="string">'length'</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        init</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self.head, self.tail = ListNode(<span class="number">-1</span>), ListNode(<span class="number">-1</span>)</span><br><span class="line">        self.head.next = self.tail</span><br><span class="line">        self.tail.pre = self.head</span><br><span class="line">        self.length = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insert_head</span><span class="params">(self, node)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        insert a value to head</span></span><br><span class="line"><span class="string">        :param node: the value</span></span><br><span class="line"><span class="string">        :return: ListNode the node has been inserted</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        node.next = self.head.next</span><br><span class="line">        self.head.next.pre = node</span><br><span class="line">        node.pre = self.head</span><br><span class="line">        self.head.next = node</span><br><span class="line">        self.length += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> node</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insert_tail</span><span class="params">(self, node)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        insert a node to tail</span></span><br><span class="line"><span class="string">        :param node: the value</span></span><br><span class="line"><span class="string">        :return: ListNode the node has been inserted</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        node.pre = self.tail.pre</span><br><span class="line">        node.next = self.tail</span><br><span class="line">        self.tail.pre = node</span><br><span class="line">        self.length += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> node</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pop_head</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        pop a node from head</span></span><br><span class="line"><span class="string">        :return: ListNode the node has been popped</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> self.length == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        tempNode = self.head.next.next</span><br><span class="line">        tempNode.pre = self.head</span><br><span class="line">        self.head.next = tempNode</span><br><span class="line">        self.length -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> tempNode</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">remove_node</span><span class="params">(self, node)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        remove a node from linkedlist</span></span><br><span class="line"><span class="string">        :param node: ListNode</span></span><br><span class="line"><span class="string">        :return: ListNode the node has been removed</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        node.next.pre = node.pre</span><br><span class="line">        node.pre.next = node.next</span><br><span class="line">        self.length -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pop_tail</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        pop a node from tail</span></span><br><span class="line"><span class="string">        :return: ListNode the node has been popped</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> self.length == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        shouldRemoveNode = self.tail.pre</span><br><span class="line">        tempNode = shouldRemoveNode.pre</span><br><span class="line">        tempNode.next = self.tail</span><br><span class="line">        self.tail.pre = tempNode</span><br><span class="line">        self.length -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> shouldRemoveNode</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">print_self</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.length == <span class="number">0</span>:</span><br><span class="line">            print(<span class="string">'none'</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        current_node = self.head.next</span><br><span class="line">        <span class="keyword">while</span> current_node.next <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            sys.stdout.write(str(current_node.val[<span class="number">0</span>]) + <span class="string">":"</span> + str(current_node.val[<span class="number">1</span>]) + <span class="string">" =&gt; "</span>)</span><br><span class="line">            current_node = current_node.next</span><br><span class="line">            <span class="keyword">if</span> current_node.next <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        sys.stdout.write(<span class="string">" None "</span>)</span><br><span class="line">        sys.stdout.write(<span class="string">" :: Length: "</span> + str(self.length))</span><br><span class="line">        sys.stdout.flush()</span><br><span class="line">        print(<span class="string">''</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LRUCache</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    LRUCache</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    __slots__ = [<span class="string">'map'</span>, <span class="string">'linkedlist'</span>, <span class="string">'cap'</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, cap)</span>:</span></span><br><span class="line">        self.cap = cap</span><br><span class="line">        self.map = &#123;&#125;</span><br><span class="line">        self.linkedlist = LinkedList()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">put</span><span class="params">(self, key, value)</span>:</span></span><br><span class="line">        <span class="comment"># if this key is exist, just update the value of the node and move this node to head</span></span><br><span class="line">        <span class="keyword">if</span> key <span class="keyword">in</span> self.map:</span><br><span class="line">            node = self.map[key]</span><br><span class="line">            node.val[<span class="number">1</span>] = value</span><br><span class="line">            self.get(key)</span><br><span class="line">            self.linkedlist.print_self()</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># not exist yet, insert this value to head and put this node to map</span></span><br><span class="line">        newNode = self.linkedlist.insert_head(ListNode([key, value]))</span><br><span class="line">        self.map[key] = newNode</span><br><span class="line"></span><br><span class="line">        <span class="comment"># check the capacity, remove the tail node if LRUCache is full</span></span><br><span class="line">        <span class="keyword">if</span> self.linkedlist.length &gt; self.cap:</span><br><span class="line">            oldNode = self.linkedlist.pop_tail()</span><br><span class="line">            oldKey = oldNode.val[<span class="number">0</span>]</span><br><span class="line">            self.map.pop(oldKey)</span><br><span class="line"></span><br><span class="line">        self.linkedlist.print_self()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, key)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> key <span class="keyword">not</span> <span class="keyword">in</span> self.map:</span><br><span class="line">            self.linkedlist.print_self()</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># get the node, move this node to head</span></span><br><span class="line">        node = self.map[key]</span><br><span class="line">        self.linkedlist.remove_node(node)</span><br><span class="line">        self.linkedlist.insert_head(node)</span><br><span class="line">        <span class="comment"># return the value</span></span><br><span class="line">        self.linkedlist.print_self()</span><br><span class="line">        <span class="keyword">return</span> node.val[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cmds = [<span class="string">"put"</span>, <span class="string">"put"</span>, <span class="string">"put"</span>, <span class="string">"put"</span>, <span class="string">"put"</span>, <span class="string">"get"</span>, <span class="string">"put"</span>, <span class="string">"get"</span>, <span class="string">"get"</span>, <span class="string">"put"</span>, <span class="string">"get"</span>, <span class="string">"put"</span>, <span class="string">"put"</span>, <span class="string">"put"</span>, <span class="string">"get"</span>,</span><br><span class="line">        <span class="string">"put"</span>, <span class="string">"get"</span>, <span class="string">"get"</span>, <span class="string">"get"</span>, <span class="string">"get"</span>, <span class="string">"put"</span>, <span class="string">"put"</span>, <span class="string">"get"</span>, <span class="string">"get"</span>, <span class="string">"get"</span>, <span class="string">"put"</span>, <span class="string">"put"</span>, <span class="string">"get"</span>, <span class="string">"put"</span>, <span class="string">"get"</span>, <span class="string">"put"</span>,</span><br><span class="line">        <span class="string">"get"</span>,</span><br><span class="line">        <span class="string">"get"</span>, <span class="string">"get"</span>, <span class="string">"put"</span>, <span class="string">"put"</span>, <span class="string">"put"</span>, <span class="string">"get"</span>, <span class="string">"put"</span>, <span class="string">"get"</span>, <span class="string">"get"</span>, <span class="string">"put"</span>, <span class="string">"put"</span>, <span class="string">"get"</span>, <span class="string">"put"</span>, <span class="string">"put"</span>, <span class="string">"put"</span>, <span class="string">"put"</span>,</span><br><span class="line">        <span class="string">"get"</span>,</span><br><span class="line">        <span class="string">"put"</span>, <span class="string">"put"</span>, <span class="string">"get"</span>, <span class="string">"put"</span>, <span class="string">"put"</span>, <span class="string">"get"</span>, <span class="string">"put"</span>, <span class="string">"put"</span>, <span class="string">"put"</span>, <span class="string">"put"</span>, <span class="string">"put"</span>, <span class="string">"get"</span>, <span class="string">"put"</span>, <span class="string">"put"</span>, <span class="string">"get"</span>, <span class="string">"put"</span>,</span><br><span class="line">        <span class="string">"get"</span>,</span><br><span class="line">        <span class="string">"get"</span>, <span class="string">"get"</span>, <span class="string">"put"</span>, <span class="string">"get"</span>, <span class="string">"get"</span>, <span class="string">"put"</span>, <span class="string">"put"</span>, <span class="string">"put"</span>, <span class="string">"put"</span>, <span class="string">"get"</span>, <span class="string">"put"</span>, <span class="string">"put"</span>, <span class="string">"put"</span>, <span class="string">"put"</span>, <span class="string">"get"</span>, <span class="string">"get"</span>,</span><br><span class="line">        <span class="string">"get"</span>,</span><br><span class="line">        <span class="string">"put"</span>, <span class="string">"put"</span>, <span class="string">"put"</span>, <span class="string">"get"</span>, <span class="string">"put"</span>, <span class="string">"put"</span>, <span class="string">"put"</span>, <span class="string">"get"</span>, <span class="string">"put"</span>, <span class="string">"put"</span>, <span class="string">"put"</span>, <span class="string">"get"</span>, <span class="string">"get"</span>, <span class="string">"get"</span>, <span class="string">"put"</span>, <span class="string">"put"</span>,</span><br><span class="line">        <span class="string">"put"</span>,</span><br><span class="line">        <span class="string">"put"</span>, <span class="string">"get"</span>, <span class="string">"put"</span>, <span class="string">"put"</span>, <span class="string">"put"</span>, <span class="string">"put"</span>, <span class="string">"put"</span>, <span class="string">"put"</span>, <span class="string">"put"</span>]</span><br><span class="line"></span><br><span class="line">params = [[<span class="number">10</span>, <span class="number">13</span>], [<span class="number">3</span>, <span class="number">17</span>], [<span class="number">6</span>, <span class="number">11</span>], [<span class="number">10</span>, <span class="number">5</span>], [<span class="number">9</span>, <span class="number">10</span>], [<span class="number">13</span>], [<span class="number">2</span>, <span class="number">19</span>], [<span class="number">2</span>], [<span class="number">3</span>], [<span class="number">5</span>, <span class="number">25</span>], [<span class="number">8</span>], [<span class="number">9</span>, <span class="number">22</span>], [<span class="number">5</span>, <span class="number">5</span>], [<span class="number">1</span>, <span class="number">30</span>],</span><br><span class="line">          [<span class="number">11</span>], [<span class="number">9</span>, <span class="number">12</span>], [<span class="number">7</span>], [<span class="number">5</span>], [<span class="number">8</span>], [<span class="number">9</span>], [<span class="number">4</span>, <span class="number">30</span>], [<span class="number">9</span>, <span class="number">3</span>], [<span class="number">9</span>], [<span class="number">10</span>], [<span class="number">10</span>], [<span class="number">6</span>, <span class="number">14</span>], [<span class="number">3</span>, <span class="number">1</span>], [<span class="number">3</span>], [<span class="number">10</span>, <span class="number">11</span>], [<span class="number">8</span>],</span><br><span class="line">          [<span class="number">2</span>, <span class="number">14</span>], [<span class="number">1</span>],</span><br><span class="line">          [<span class="number">5</span>], [<span class="number">4</span>], [<span class="number">11</span>, <span class="number">4</span>], [<span class="number">12</span>, <span class="number">24</span>], [<span class="number">5</span>, <span class="number">18</span>], [<span class="number">13</span>], [<span class="number">7</span>, <span class="number">23</span>], [<span class="number">8</span>], [<span class="number">12</span>], [<span class="number">3</span>, <span class="number">27</span>], [<span class="number">2</span>, <span class="number">12</span>], [<span class="number">5</span>], [<span class="number">2</span>, <span class="number">9</span>], [<span class="number">13</span>, <span class="number">4</span>],</span><br><span class="line">          [<span class="number">8</span>, <span class="number">18</span>],</span><br><span class="line">          [<span class="number">1</span>, <span class="number">7</span>], [<span class="number">6</span>], [<span class="number">9</span>, <span class="number">29</span>], [<span class="number">8</span>, <span class="number">21</span>], [<span class="number">5</span>], [<span class="number">6</span>, <span class="number">30</span>], [<span class="number">1</span>, <span class="number">12</span>], [<span class="number">10</span>], [<span class="number">4</span>, <span class="number">15</span>], [<span class="number">7</span>, <span class="number">22</span>], [<span class="number">11</span>, <span class="number">26</span>], [<span class="number">8</span>, <span class="number">17</span>], [<span class="number">9</span>, <span class="number">29</span>], [<span class="number">5</span>],</span><br><span class="line">          [<span class="number">3</span>, <span class="number">4</span>],</span><br><span class="line">          [<span class="number">11</span>, <span class="number">30</span>], [<span class="number">12</span>], [<span class="number">4</span>, <span class="number">29</span>], [<span class="number">3</span>], [<span class="number">9</span>], [<span class="number">6</span>], [<span class="number">3</span>, <span class="number">4</span>], [<span class="number">1</span>], [<span class="number">10</span>], [<span class="number">3</span>, <span class="number">29</span>], [<span class="number">10</span>, <span class="number">28</span>], [<span class="number">1</span>, <span class="number">20</span>], [<span class="number">11</span>, <span class="number">13</span>], [<span class="number">3</span>], [<span class="number">3</span>, <span class="number">12</span>],</span><br><span class="line">          [<span class="number">3</span>, <span class="number">8</span>],</span><br><span class="line">          [<span class="number">10</span>, <span class="number">9</span>], [<span class="number">3</span>, <span class="number">26</span>], [<span class="number">8</span>], [<span class="number">7</span>], [<span class="number">5</span>], [<span class="number">13</span>, <span class="number">17</span>], [<span class="number">2</span>, <span class="number">27</span>], [<span class="number">11</span>, <span class="number">15</span>], [<span class="number">12</span>], [<span class="number">9</span>, <span class="number">19</span>], [<span class="number">2</span>, <span class="number">15</span>], [<span class="number">3</span>, <span class="number">16</span>], [<span class="number">1</span>], [<span class="number">12</span>, <span class="number">17</span>],</span><br><span class="line">          [<span class="number">9</span>, <span class="number">1</span>],</span><br><span class="line">          [<span class="number">6</span>, <span class="number">19</span>], [<span class="number">4</span>], [<span class="number">5</span>], [<span class="number">5</span>], [<span class="number">8</span>, <span class="number">1</span>], [<span class="number">11</span>, <span class="number">7</span>], [<span class="number">5</span>, <span class="number">2</span>], [<span class="number">9</span>, <span class="number">28</span>], [<span class="number">1</span>], [<span class="number">2</span>, <span class="number">2</span>], [<span class="number">7</span>, <span class="number">4</span>], [<span class="number">4</span>, <span class="number">22</span>], [<span class="number">7</span>, <span class="number">24</span>], [<span class="number">9</span>, <span class="number">26</span>],</span><br><span class="line">          [<span class="number">13</span>, <span class="number">28</span>],</span><br><span class="line">          [<span class="number">11</span>, <span class="number">26</span>]]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_list</span><span class="params">(l)</span>:</span></span><br><span class="line">    sys.stdout.write(<span class="string">'['</span>)</span><br><span class="line">    sys.stdout.write(<span class="string">', '</span>.join(str(p) <span class="keyword">for</span> p <span class="keyword">in</span> l))</span><br><span class="line">    sys.stdout.write(<span class="string">']'</span>)</span><br><span class="line"></span><br><span class="line">cache = LRUCache(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> xrange(len(cmds)):</span><br><span class="line">    cmd = cmds[i]</span><br><span class="line">    param = params[i]</span><br><span class="line"></span><br><span class="line">    sys.stdout.write(str(i) + <span class="string">" "</span> + cmd + <span class="string">" "</span>)</span><br><span class="line">    print_list(param)</span><br><span class="line">    sys.stdout.write(<span class="string">"\n"</span>)</span><br><span class="line">    val = getattr(cache, cmd)(*param)</span><br><span class="line">    print(<span class="string">"result "</span> + str(val))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h3&gt;&lt;p&gt;LRUCache 是一个很常用的缓存实现，本文会首先介绍一下 LRUCache 的定义，然后尝试用 Python 实现它。&lt;/p&gt;
&lt;h4 
      
    
    </summary>
    
      <category term="Algorithm" scheme="https://xhinliang.win/categories/Algorithm/"/>
    
    
      <category term="Algorithm" scheme="https://xhinliang.win/tags/Algorithm/"/>
    
      <category term="Data Structure" scheme="https://xhinliang.win/tags/Data-Structure/"/>
    
  </entry>
  
  <entry>
    <title>Android 中设置界面的思考</title>
    <link href="https://xhinliang.win/2016/03/frontend/think-about-android-preference/"/>
    <id>https://xhinliang.win/2016/03/frontend/think-about-android-preference/</id>
    <published>2016-03-11T11:55:29.000Z</published>
    <updated>2024-04-24T15:04:19.906Z</updated>
    
    <content type="html"><![CDATA[<h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>在 <strong>Android™</strong> 中大部分应用都需要一个 <strong>系统设置</strong> 界面，有很多开发者（或者开发组）都喜欢自己做一个 <strong>Activity</strong> 或者 <strong>Fragment</strong> 作为设置界面。但是谷歌本来就为 <strong>Android™</strong> 的设置界面提供了一个解决方案，那就是 <strong>PreferenceFragment</strong>（PreferenceActivity 已经不推荐使用）。</p><p>遗憾的是，由于 <strong>Android™</strong> 设备的碎片化，同样的代码，在不同的 <strong>API</strong> 中会有相当大的界面区别。</p><h3 id="原生库"><a href="#原生库" class="headerlink" title="原生库"></a>原生库</h3><p>如下的 <strong>PreferenceScreen</strong> 的 <strong>XML</strong> 代码<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">PreferenceScreen</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">PreferenceCategory</span> <span class="attr">android:title</span>=<span class="string">"Alert Settings"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">CheckBoxPreference</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:key</span>=<span class="string">"preference_key_remind_the_same_day11"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:summary</span>=<span class="string">"Alert in the birthday"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:title</span>=<span class="string">"Alert first"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">SwitchPreference</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:key</span>=<span class="string">"preference_key_remind_the_same_day31"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:summary</span>=<span class="string">"Alert in three day before birthday"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:title</span>=<span class="string">"Alert second"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">EditTextPreference</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:key</span>=<span class="string">"preference_key_remind_the_same_daywwwd21"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:summary</span>=<span class="string">"Alert in a week before the birthday"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:title</span>=<span class="string">"Alert third"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">SwitchPreference</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:key</span>=<span class="string">"preference_key_remind_the_same_day341"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:summary</span>=<span class="string">"Alert in two weeks before the birthday"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:title</span>=<span class="string">"Alert fourth"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ListPreference</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:entries</span>=<span class="string">"@array/alert_time_entry"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:entryValues</span>=<span class="string">"@array/alert_time_value"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:key</span>=<span class="string">"preference_key_alert_timess1"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:summary</span>=<span class="string">"Select alert time"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:title</span>=<span class="string">"Alert time"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">MultiSelectListPreference</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:entries</span>=<span class="string">"@array/alert_time_entry"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:entryValues</span>=<span class="string">"@array/alert_time_value"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:key</span>=<span class="string">"preference_key_alert_timeddwexss1"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:summary</span>=<span class="string">"Select alert time"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:title</span>=<span class="string">"Alert time"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">PreferenceCategory</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">PreferenceScreen</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>在不同设备的效果如图所示<br><img src="/uploads/think-about-preference/original_preference.gif" alt="original"></p><p>左边的是 <strong>API 16 Android™ 4.1.1</strong>，右边的是 <strong>API 22 Android™ 5.1.1</strong></p><p>也正是因为效果差别如此之大，所以使用系统的 <strong>Preference</strong> 并不是一个很好的选择。</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>最近实习的公司也基本敲定了，也有空搞点有趣的东西，结合 <a href="https://github.com/jenzz/Android-MaterialPreference" target="_blank" rel="noopener">Android-MaterialPreference</a> 和 <a href="https://github.com/rey5137/material" target="_blank" rel="noopener">material</a> 这两个第三方的 <strong>Material Design</strong> 兼容库，组合出来一个便于使用的 <a href="https://github.com/XhinLiang/MDPreference" target="_blank" rel="noopener">MDPreference</a>。</p><h4 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h4><p>在项目的主 build.gradle 中添加 <strong>jitpack</strong> 的仓库</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">allprojects &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">...</span><br><span class="line">maven &#123; url <span class="string">"https://jitpack.io"</span> &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>添加依赖<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    compile <span class="string">'com.github.XhinLiang.MDPreference:mdpreference:0.3.1@aar'</span></span><br><span class="line">    <span class="comment">// You should add this because the 'mdpreference' depend on this</span></span><br><span class="line">    compile <span class="string">'com.github.XhinLiang.MDPreference:material:0.3.1@aar'</span></span><br><span class="line">    <span class="comment">// You should add these because the 'material' depend on them</span></span><br><span class="line">    compile <span class="string">'com.android.support:appcompat-v7:23.1.1'</span></span><br><span class="line">    compile <span class="string">'com.android.support:cardview-v7:23.1.1'</span></span><br><span class="line">    compile <span class="string">'com.android.support:recyclerview-v7:23.1.1'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这里还得说明一下<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">compile <span class="string">'com.github.XhinLiang.MDPreference:material:0.3.1@aar'</span></span><br></pre></td></tr></table></figure></p><p>这个依赖也必须添加，因为里面很多控件都是使用了 <a href="https://github.com/rey5137/material" target="_blank" rel="noopener">material</a> 这个库，为什么不直接添加这个库本身的依赖，是因为这个库里面的接口有点乱，添加的是我重构删减过的版本。</p><h4 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h4><p>这里展示了在 <strong>API 16</strong> 设备中的效果<br><img src="/uploads/think-about-preference/sample.gif" alt="sample"></p><p>对话框变色应该是截图软件引起的</p><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p>事实上这个库的使用跟 <strong>Android™</strong> 官方的没什么区别，有区别的地方在 <strong>ListPreference</strong> 和 <strong>MultiSelectListPreference</strong>。由于官方的 <strong>entries entryValues</strong> 这两个资源ID是私有的，所以只好自己另外定义资源ID。</p><p>对于 <strong>ListPreference</strong>，具体是这个样子的<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">io.github.xhinliang.mdpreference.ListPreference</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:key</span>=<span class="string">"preference_key_alert_timess"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:summary</span>=<span class="string">"Select alert time"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:title</span>=<span class="string">"Alert time"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:entry_arr</span>=<span class="string">"@array/alert_time_entry"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:format_str</span>=<span class="string">"%s"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:value_arr</span>=<span class="string">"@array/alert_time_value"</span> /&gt;</span></span><br></pre></td></tr></table></figure></p><p>其中  <strong>entry_arr</strong> 是展示给用户的那个数组，</p><p> <strong>format_str</strong> 就是一个 <strong>summary</strong> 的输出格式，它里面的 <strong>%s</strong> 在输出时会被替换为选择的那个 <strong>entry</strong>。例如<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app:format_str="The Alert Time is %s"</span><br></pre></td></tr></table></figure></p><p>在用户选择之前，<strong>Summary</strong> 为 “Select alert time”，而在用户选择了 “12:00” 之后，<strong>Summary</strong> 为 “The Alert Time is 12:00”。</p><p>而 <strong>value_arr</strong> 则是我们获取到的值的数组。也就是说，在用户选择了一个 <strong>entry</strong> 之后，我们通过 <strong>SharePreference</strong> 获取到的那个 <strong>String</strong> 的值，这其实跟官方的思路是一模一样的。</p><p>示例代码如下<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SharedPreferences preferences = getSharedPreferences(getString(R.string.app_name), MODE_PRIVATE);</span><br><span class="line">preferences.getString(<span class="string">"preference_key_alert_timess"</span>, <span class="string">""</span>);</span><br></pre></td></tr></table></figure></p><p>对于 <strong>MultiSelectListPreference</strong>，具体是这个样子的</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">io.github.xhinliang.mdpreference.MultiSelectListPreference</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:key</span>=<span class="string">"preference_key_alert_timeddwexss"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:summary</span>=<span class="string">"Select alert time"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:title</span>=<span class="string">"Alert time"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:entry_arr</span>=<span class="string">"@array/alert_time_entry"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>注意这里跟官方的差别有点大，其中  <strong>entry_arr</strong> 是展示给用户的那个数组，而 <strong>value_arr</strong> 这个参数被我砍掉了。因为我觉得像官方一样把整个 <strong>value String</strong> 集合保存在 <strong>SharePreference</strong> 里是十分不优雅的。</p><p>我选择了另一种方式，将用户选择的 <strong>entry</strong> 的下标用 <strong>int</strong> 保存起来（这也就意味着，多选框的选项不能超过32个）。</p><p>也就是说，在用户选择了一个 <strong>entry</strong> 之后，我们只能通 <strong>SharePreference</strong> 获取到的一个 <strong>int</strong> ，这个 <strong>int</strong> 的每一个二进制位的 <strong>0</strong> 或 <strong>1</strong> 就代表了对应下标的选项的选择与否，为了减少二进制操作的麻烦，这里还提供了一个静态方法 <strong>MultiSelectListPreference.getSetByBit</strong> 可以将获得的 <strong>int</strong> 转换为对应的 <strong>Set</strong> ，这个 <strong>Set</strong> 里面包含了被选中的选项的下标。</p><p>示例代码如下<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> bit = preferences.getInt(<span class="string">"key_multi"</span>,<span class="number">0</span>);</span><br><span class="line">Set&lt;Integer&gt; set = MultiSelectListPreference.getSetByBit(bit);</span><br></pre></td></tr></table></figure></p><h3 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h3><p>为什么在官方的实现里要使用 <strong>entry + value</strong> 这样的方案呢，事实上使用下标来代表是否选择，不是更加优雅吗？（事实上我有想把 <strong>ListPreference</strong> 里的方案也改掉的冲动）</p><p>这只是我个人的看法，如有错误欢迎指出。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h3&gt;&lt;p&gt;在 &lt;strong&gt;Android™&lt;/strong&gt; 中大部分应用都需要一个 &lt;strong&gt;系统设置&lt;/strong&gt; 界面，有很多开发
      
    
    </summary>
    
      <category term="Frontend" scheme="https://xhinliang.win/categories/Frontend/"/>
    
    
      <category term="Android" scheme="https://xhinliang.win/tags/Android/"/>
    
  </entry>
  
</feed>
